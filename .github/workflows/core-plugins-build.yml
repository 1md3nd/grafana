on:
  push:
    branches:
      - testdataDecoupled_ci
  workflow_dispatch:
    inputs:
      plugin_id:
        description: "ID of the plugin you want to publish"
        required: true
        type: choice
        options:
          - grafana-testdata-datasource

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ inputs.plugin_id }}
  cancel-in-progress: true

env:
    NODEJS_VERSION: 18.x
    GO_VERSION: 1.21
    GO_LINT_VERSION: 1.51.1
    GRABPL_VERSION: 3.0.41
    GCP_BUCKET: integration-artifacts
    # TODO: Remove and use ${{ inputs.plugin_id }} instead
    plugin_id: grafana-testdata-datasource

jobs:
    build-and-publish:
      name: Build and publish a core plugin
      runs-on: ubuntu-latest
      steps:
        - name: checkout
          uses: actions/checkout@v3
        - name: 'Authenticate to Google Cloud'
          uses: 'google-github-actions/auth@v1'
          with:
            credentials_json: '${{ secrets.PLUGINS_GOOGLE_CREDENTIALS }}'
        - name: 'Set up Cloud SDK'
          uses: 'google-github-actions/setup-gcloud@v1'
        - name: Verify plugin_id
          run: |
            if [ -z ${{ env.plugin_id }} ]; then echo "Missing plugin ID"; exit 1; fi
        - name: Setup nodejs environment
          uses: actions/setup-node@v3
          with:
            node-version: ${{ env.NODEJS_VERSION }}
            cache: yarn
        - name: Install frontend dependencies
          shell: bash
          working-directory: ./public/plugins/${{ env.plugin_id }}
          run: |
           yarn install --immutable
        - name: Download grabpl executable
          shell: sh
          working-directory: ./public/plugins/${{ env.plugin_id }}
          run: |
            [ ! -d ./bin ] && mkdir -pv ./bin || true
            curl -fL -o ./bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v${{ env.GRABPL_VERSION }}/grabpl
            chmod 0755 ./bin/grabpl
        - name: Setup golang environment
          uses: actions/setup-go@v4
          if: endsWith(env.plugin_id, '-datasource')
          with:
            go-version: ${{ env.GO_VERSION }}
        - name: Install Mage
          shell: bash
          if: endsWith(env.plugin_id, '-datasource')
          run: |
            go install github.com/magefile/mage
        - name: Install golangci-lint
          if: endsWith(env.plugin_id, '-datasource')
          shell: bash
          run: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v${{ env.GO_LINT_VERSION }}
        - name: Check tools
          shell: bash
          working-directory: ./public/plugins/${{ env.plugin_id }}
          run: |
            echo "======================================="
            echo "    Frontend tools"
            echo "======================================="
            echo "-------- node version -----"
            node --version
            echo "-------- npm version -----"
            npm --version
            echo "-------- yarn version -----"
            yarn --version
            echo "======================================="
            echo "    Misc tools"
            echo "======================================="
            echo "-------- docker version -----"
            docker --version
            echo "-------- jq version -----"
            jq --version
            echo "-------- grabpl version -----"
            ./bin/grabpl --version
            echo "======================================="
        - name: Check backend tools
          shell: bash
          if: endsWith(env.plugin_id, '-datasource')
          working-directory: ./public/plugins/${{ env.plugin_id }}
          run: |
            echo "======================================="
            echo "    Backend tools"
            echo "======================================="
            echo "-------- go version -----"
            go version
            echo "-------- mage version -----"
            mage --version
            echo "-------- golangci-lint version -----"
            golangci-lint --version
            echo "======================================="
        - name: test:frontend
          working-directory: ./public/plugins/${{ env.plugin_id }}
          shell: bash
          run: |
            yarn test:ci
        - name: lint:frontend
          working-directory: ./public/plugins/${{ env.plugin_id }}
          shell: bash
          run: |
            yarn lint
        - name: build:frontend
          working-directory: ./public/plugins/${{ env.plugin_id }}
          shell: bash
          run: |
            yarn build
        - name: lint:backend
          if: endsWith(env.plugin_id, '-datasource')
          working-directory: ./public/plugins/${{ env.plugin_id }}
          shell: bash
          run: |
            mage lint
        - name: test:backend
          if: endsWith(env.plugin_id, '-datasource')
          working-directory: ./public/plugins/${{ env.plugin_id }}
          shell: bash
          run: |
            mage test
        - name: build:backend
          if: endsWith(env.plugin_id, '-datasource')
          working-directory: ./public/plugins/${{ env.plugin_id }}
          shell: bash
          run: |
            mage -v
        - name: package
          working-directory: ./public/plugins/${{ env.plugin_id }}
          run: |
              mkdir -p ci/jobs/package
              bin/grabpl plugin package
          env:
            GRAFANA_API_KEY: ${{ secrets.PLUGINS_GRAFANA_API_KEY }}
            PLUGIN_SIGNATURE_TYPE: grafana
        - name: store build artifacts
          uses: actions/upload-artifact@v3
          with:
            name: build-artifacts
            path: ./public/plugins/${{ env.plugin_id }}/ci/packages/*.zip
        - name: Publish release to Google Cloud Storage
          working-directory: ./public/plugins/${{ env.plugin_id }}
          run: |
            echo "Publish release to Google Cloud Storage:"
            version=$(cat ci/dist/${{ env.plugin_id }}/plugin.json | jq -r .info.version)
            echo "Plugin version: $version"
            touch ci/packages/windows ci/packages/darwin ci/packages/linux ci/packages/any
            gsutil -m cp -r ci/packages/*windows* gs://${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/windows
            gsutil -m cp -r ci/packages/*linux* gs://${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/linux 
            gsutil -m cp -r ci/packages/*darwin* gs://${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/darwin
            gsutil -m cp -r ci/packages/*any* gs://${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/any
        - name: Publish new plugin version on grafana.com
          working-directory: ./public/plugins/${{ env.plugin_id }}
          env:
            GCOM_TOKEN: ${{ secrets.PLUGINS_GCOM_TOKEN }}
          run: |
            echo "Publish new plugin version on grafana.com:"
            version=$(cat ci/dist/${{ env.plugin_id }}/plugin.json | jq -r .info.version)
            echo "Plugin version: $version"
            curl -H "Authorization: Bearer $GCOM_TOKEN" -H "Content-Type: application/json" https://grafana-dev.com/api/plugins -d "{
              \"url\": \"https://github.com/grafana/grafana/tree/main/public/plugins/${{ env.plugin_id }}\",
              \"download\": {
                \"linux-amd64\": {
                  \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/linux/${{ env.plugin_id }}-${version}.linux_amd64.zip\",
                  \"md5\": \"$(cat ci/packages/info-linux_amd64.json | jq -r .plugin.md5)\"
                },
                \"linux-arm64\": {
                  \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/linux/${{ env.plugin_id }}-${version}.linux_arm64.zip\",
                  \"md5\": \"$(cat ci/packages/info-linux_arm64.json | jq -r .plugin.md5)\"
                },
                \"linux-arm\": {
                  \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/linux/${{ env.plugin_id }}-${version}.linux_arm.zip\",
                  \"md5\": \"$(cat ci/packages/info-linux_arm.json | jq -r .plugin.md5)\"
                },
                \"windows-amd64\": {
                  \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/windows/${{ env.plugin_id }}-${version}.windows_amd64.zip\",
                  \"md5\": \"$(cat ci/packages/info-windows_amd64.json | jq -r .plugin.md5)\"
                },
                \"darwin-amd64\": {
                  \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/darwin/${{ env.plugin_id }}-${version}.darwin_amd64.zip\",
                  \"md5\": \"$(cat ci/packages/info-darwin_amd64.json | jq -r .plugin.md5)\"
                },
                \"darwin-arm64\": {
                  \"url\": \"https://storage.googleapis.com/${{ env.GCP_BUCKET }}/${{ env.plugin_id }}/release/${version}/darwin/${{ env.plugin_id }}-${version}.darwin_arm64.zip\",
                  \"md5\": \"$(cat ci/packages/info-darwin_arm64.json | jq -r .plugin.md5)\"
                }
              }
            }"