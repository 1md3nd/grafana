//go:build generate

package main

import (
	"encoding/json"
	"fmt"
	"os"
	"path"
	"strings"
	"text/template"
)

//go:generate go run gen_dashboards.go

var jsTmpl = template.Must(template.New("dashboards").Delims("[[", "]]").Parse(`// Code generated by grafana-api-tests/lib/generate.go. DO NOT EDIT.

/**
 * @typedef {{name: string, content: *}} ExampleDashboard
 */

/**
 * List of 'random' sample dashboards.
 * Primarily meant for internal use.
 *
 * @type {ExampleDashboard[]}
 */
export const devDashboards = [
	[[ range . -]]
	{
		'name': '[[ .FileName ]]',
		'content': [[ .Content ]],
	},
	[[ end ]]
];
`))

type DashboardFile struct {
	FileName string
	Content  string
}

func main() {
	fmt.Println("generating ./lib/dashboards_gen.js ...")
	const dirName = "../../devenv/dev-dashboards"
	entries, err := os.ReadDir(dirName)
	if err != nil {
		panic(err)
	}

	files := []DashboardFile{}
	for _, file := range entries {
		name := file.Name()
		if !strings.HasSuffix(name, ".json") {
			continue
		}

		content, err := os.ReadFile(path.Join(dirName, name))
		if err != nil {
			panic(err)
		}

		data := map[string]any{}
		json.Unmarshal(content, &data)
		delete(data, "uid")
		content, err = json.Marshal(data)
		if err != nil {
			panic(err)
		}

		files = append(files, DashboardFile{
			FileName: name,
			Content:  strings.TrimSpace(string(content)),
		})
	}

	f, err := os.OpenFile("dashboards_gen.js", os.O_TRUNC|os.O_WRONLY|os.O_CREATE, 0o640)
	if err != nil {
		panic(err)
	}
	defer f.Close()
	err = jsTmpl.Execute(f, files)
	if err != nil {
		panic(err)
	}

	fmt.Println("generated ./lib/dashboards_gen.js")
}
