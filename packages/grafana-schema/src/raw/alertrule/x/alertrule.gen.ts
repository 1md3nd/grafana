// This file is autogenerated. DO NOT EDIT.
//
// Generated by pkg/framework/coremodel/gen.go
//
// Derived from the Thema lineage declared in pkg/coremodel/alertrule/coremodel.cue
//
// Run `make gen-cue` from repository root to regenerate.

export enum NoDataState {
  Alerting = 'Alerting',
  NoData = 'NoData',
  OK = 'OK',
}

export enum ExecutionErrState {
  Alerting = 'Alerting',
  Error = 'Error',
  OK = 'OK',
}

export interface Alertrule {
  annotations: Array<{
    key: string;
    value: string;
  }>;
  condition: string;
  execErrState: ExecutionErrState;
  folderUid: string;
  /**
   * A go-parseable duration string.
   */
  for: string;
  /**
   * Unique numeric identifier for the rule. Read-only.
   */
  id?: number;
  labels: Array<{
    key: string;
    value: string;
  }>;
  noDataState: NoDataState;
  queries: Array<{
    refID: string;
    queryType: string;
    /**
     * RelativeTimeRange is the relative Start and End of the query as sent by the frontend.
     */
    relativeTimeRange: {
      from: string;
      to: string;
    };
    /**
     * Grafana data source unique identifier; it should be '-100' for a Server Side Expression operation.
     */
    datasourceUID: string;
    /**
     * model is the raw JSON query and includes the above properties as well as custom properties.
     */
    model: string;
  }>;
  ruleGroup: string;
  title: string;
  /**
   * Unique identifier that can be generated by anyone. string (8-40)
   */
  uid: string;
}

export const defaultAlertrule: Partial<Alertrule> = {
  annotations: [],
  labels: [],
  queries: [],
};
