// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by:
//     kinds/gen.go
// Using jennies:
//     TSTypesJenny
//     LatestMajorsOrXJenny
//
// Run 'make gen-cue' from repository root to regenerate.

/**
 * The email address associated with the user. Does not
 * necessarily hold an email address.
 */
export type email = (login | string);

export const defaultemail: email = login;

/**
 * The username that can be used to log in the user and can be
 * used to distinguish between two equal names. Unique within
 * an instance.
 */
export type login = (email | string);

export const defaultlogin: login = email;

/**
 * User-specific theme preference.
 */
export enum theme {
  Dark = 'dark',
  Light = 'light',
}

export interface User {
  /**
   * Access control metadata associated with the user.
   */
  accessControl?: Record<string, boolean>;
  /**
   * For external users, this contains the type of the
   * authentication provider used to authenticate the user.
   */
  authLabels?: Array<string>;
  /**
   * The Gravatar URL associated with the user's email.
   */
  avatarUrl?: string;
  /**
   * Created indicates when the user was created.
   */
  created: number;
  /**
   * The email address associated with the user. Does not
   * necessarily hold an email address.
   */
  email: login;
  /**
   * Numeric instance unique numeric identifier.
   */
  id?: number;
  /**
   * Disabled users are unable to log in.
   */
  isDisabled: boolean;
  /**
   * External users are authenticated through an external
   * source of authentication.
   */
  isExternal: boolean;
  /**
   * Whether the user has the Grafana Admin flag set to grant
   * additional permissions for managing the instance.
   */
  isGrafanaAdmin: boolean;
  /**
   * The username that can be used to log in the user and can be
   * used to distinguish between two equal names. Unique within
   * an instance.
   */
  login: email;
  /**
   * Display name, for showing in lists to end users.
   */
  name: string;
  /**
   * The currently active organization for the given user.
   */
  orgId?: number;
  /**
   * User-specific theme preference.
   */
  theme?: ('dark' | 'light');
  /**
   * Updated indicates when the user was most recently updated.
   */
  updated: number;
}

export const defaultUser: Partial<User> = {
  authLabels: [],
  email: defaultlogin,
  isDisabled: false,
  isExternal: false,
  isGrafanaAdmin: false,
  login: defaultemail,
};
