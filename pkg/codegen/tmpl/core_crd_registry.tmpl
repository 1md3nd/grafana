package {{ .PackageName }}

import (
	"fmt"

	{{range .Kinds }}
	{{ .Properties.MachineName }} "{{ $.KindPackagePrefix }}/{{ .Properties.MachineName }}/crd"{{end}}
	"github.com/grafana/grafana/pkg/kindsys"
	"github.com/grafana/grafana/pkg/kindsys/k8ssys"
	"github.com/grafana/grafana/pkg/registry/corekind"
	"gopkg.in/yaml.v3"
)

// Registry is a list of all of Grafana's core structured kinds, wrapped in a
// standard [k8ssys.CRD] interface that makes them usable for interactions
// with certain Kubernetes controller and apimachinery libraries.
//
// There are two access methods: individually via literal named methods, or as
// a slice returned from All() method.
//
// Prefer the individual named methods for use cases where the particular kind(s)
// that are needed are known to the caller. Prefer All() when performing operations
// generically across all kinds.
type Registry struct {
	all [{{ len .Kinds }}]k8ssys.Kind
}

{{range $i, $k := .Kinds }}
// {{ .Properties.Name }} returns the [k8ssys.Kind] instance for the {{ .Properties.Name }} kind.
func (r *Registry) {{ .Properties.Name }}() k8ssys.Kind {
	return r.all[{{ $i }}]
}
{{end}}

func doNewRegistry(breg *corekind.Base) *Registry {
	var err error
	var kk k8ssys.Kind
	reg := &Registry{}

{{range $i, $k := .Kinds }}
  kk = k8ssys.Kind{
    GrafanaKind: breg.{{ $k.Properties.Name }}(),
    Object: &{{ $k.Properties.MachineName }}.{{ $k.Properties.Name }}{},
    ObjectList: &{{ $k.Properties.MachineName }}.{{ $k.Properties.Name }}List{},
  }
  err = yaml.Unmarshal({{ $k.Properties.MachineName }}.CRDYaml, &kk.Schema)
  if err != nil {
    panic(fmt.Sprintf("generated CRD YAML for {{ $k.Properties.Name }} failed to unmarshal: %s", err))
  }
  reg.all[{{ $i }}] = kk
{{end}}

	return reg
}
