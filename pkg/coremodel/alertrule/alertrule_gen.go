// This file is autogenerated. DO NOT EDIT.
//
// Generated by pkg/framework/coremodel/gen.go
//
// Derived from the Thema lineage declared in pkg/coremodel/alertrule/coremodel.cue
//
// Run `make gen-cue` from repository root to regenerate.

package alertrule

import (
	"embed"
	"path/filepath"

	"github.com/grafana/grafana/pkg/cuectx"
	"github.com/grafana/grafana/pkg/framework/coremodel"
	"github.com/grafana/thema"
)

// Defines values for ExecErrState.
const (
	ExecErrStateAlerting ExecErrState = "Alerting"

	ExecErrStateError ExecErrState = "Error"

	ExecErrStateOK ExecErrState = "OK"
)

// Defines values for NoDataState.
const (
	NoDataStateAlerting NoDataState = "Alerting"

	NoDataStateNoData NoDataState = "NoData"

	NoDataStateOK NoDataState = "OK"
)

// Defines values for ExecutionErrState.
const (
	ExecutionErrStateAlerting ExecutionErrState = "Alerting"

	ExecutionErrStateError ExecutionErrState = "Error"

	ExecutionErrStateOK ExecutionErrState = "OK"
)

// Model is the Go representation of a alertrule.
//
// THIS TYPE IS INTENDED FOR INTERNAL USE BY THE GRAFANA BACKEND, AND IS SUBJECT TO BREAKING CHANGES.
// Equivalent Go types at stable import paths are provided in https://github.com/grafana/grok.
type Model struct {
	Annotations  *Labels      `json:"annotations,omitempty"`
	Condition    string       `json:"condition"`
	ExecErrState ExecErrState `json:"execErrState"`
	FolderUid    string       `json:"folderUid"`

	// A go-parseable duration string.
	For string `json:"for"`

	// Unique numeric identifier for the rule. Read-only.
	Id          *int64        `json:"id,omitempty"`
	Labels      *Labels       `json:"labels,omitempty"`
	NoDataState NoDataState   `json:"noDataState"`
	Queries     *[]AlertQuery `json:"queries,omitempty"`
	RuleGroup   string        `json:"ruleGroup"`
	Title       string        `json:"title"`

	// Unique identifier that can be generated by anyone. string (8-40)
	Uid string `json:"uid"`
}

// ExecErrState is the Go representation of a Model.ExecErrState.
//
// THIS TYPE IS INTENDED FOR INTERNAL USE BY THE GRAFANA BACKEND, AND IS SUBJECT TO BREAKING CHANGES.
// Equivalent Go types at stable import paths are provided in https://github.com/grafana/grok.
type ExecErrState string

// NoDataState is the Go representation of a Model.NoDataState.
//
// THIS TYPE IS INTENDED FOR INTERNAL USE BY THE GRAFANA BACKEND, AND IS SUBJECT TO BREAKING CHANGES.
// Equivalent Go types at stable import paths are provided in https://github.com/grafana/grok.
type NoDataState string

// AlertQuery is the Go representation of a alertrule.AlertQuery.
//
// THIS TYPE IS INTENDED FOR INTERNAL USE BY THE GRAFANA BACKEND, AND IS SUBJECT TO BREAKING CHANGES.
// Equivalent Go types at stable import paths are provided in https://github.com/grafana/grok.
type AlertQuery struct {
	// Grafana data source unique identifier; it should be '-100' for a Server Side Expression operation.
	DatasourceUID string `json:"datasourceUID"`

	// model is the raw JSON query and includes the above properties as well as custom properties.
	Model             string             `json:"model"`
	QueryType         string             `json:"queryType"`
	RefID             string             `json:"refID"`
	RelativeTimeRange *RelativeTimeRange `json:"relativeTimeRange,omitempty"`
}

// ExecutionErrState is the Go representation of a alertrule.ExecutionErrState.
//
// THIS TYPE IS INTENDED FOR INTERNAL USE BY THE GRAFANA BACKEND, AND IS SUBJECT TO BREAKING CHANGES.
// Equivalent Go types at stable import paths are provided in https://github.com/grafana/grok.
type ExecutionErrState string

// Labels is the Go representation of a alertrule.Labels.
//
// THIS TYPE IS INTENDED FOR INTERNAL USE BY THE GRAFANA BACKEND, AND IS SUBJECT TO BREAKING CHANGES.
// Equivalent Go types at stable import paths are provided in https://github.com/grafana/grok.
type Labels map[string]interface{}

// RelativeTimeRange is the Go representation of a alertrule.RelativeTimeRange.
//
// THIS TYPE IS INTENDED FOR INTERNAL USE BY THE GRAFANA BACKEND, AND IS SUBJECT TO BREAKING CHANGES.
// Equivalent Go types at stable import paths are provided in https://github.com/grafana/grok.
type RelativeTimeRange struct {
	From string `json:"from"`
	To   string `json:"to"`
}

//go:embed coremodel.cue
var cueFS embed.FS

// The current version of the coremodel schema, as declared in coremodel.cue.
// This version determines what schema version is returned from [Coremodel.CurrentSchema],
// and which schema version is used for code generation within the grafana/grafana repository.
//
// The code generator ensures that this is always the latest Thema schema version.
var currentVersion = thema.SV(0, 0)

// Lineage returns the Thema lineage representing a Grafana alertrule.
//
// The lineage is the canonical specification of the current alertrule schema,
// all prior schema versions, and the mappings that allow migration between
// schema versions.
func Lineage(lib thema.Library, opts ...thema.BindOption) (thema.Lineage, error) {
	return cuectx.LoadGrafanaInstancesWithThema(filepath.Join("pkg", "coremodel", "alertrule"), cueFS, lib, opts...)
}

var _ thema.LineageFactory = Lineage
var _ coremodel.Interface = &Coremodel{}

// Coremodel contains the foundational schema declaration for alertrules.
// It implements coremodel.Interface.
type Coremodel struct {
	lin thema.Lineage
}

// Lineage returns the canonical alertrule Lineage.
func (c *Coremodel) Lineage() thema.Lineage {
	return c.lin
}

// CurrentSchema returns the current (latest) alertrule Thema schema.
func (c *Coremodel) CurrentSchema() thema.Schema {
	return thema.SchemaP(c.lin, currentVersion)
}

// GoType returns a pointer to an empty Go struct that corresponds to
// the current Thema schema.
func (c *Coremodel) GoType() interface{} {
	return &Model{}
}

// New returns a new instance of the alertrule coremodel.
//
// Note that this function does not cache, and initially loading a Thema lineage
// can be expensive. As such, the Grafana backend should prefer to access this
// coremodel through a registry (pkg/framework/coremodel/registry), which does cache.
func New(lib thema.Library) (*Coremodel, error) {
	lin, err := Lineage(lib)
	if err != nil {
		return nil, err
	}

	return &Coremodel{
		lin: lin,
	}, nil
}
