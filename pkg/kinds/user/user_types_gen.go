// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by:
//     kinds/gen.go
// Using jennies:
//     GoTypesJenny
//     LatestJenny
//
// Run 'make gen-cue' from repository root to regenerate.

package user

// Defines values for Theme.
const (
	ThemeDark Theme = "dark"

	ThemeLight Theme = "light"
)

// The email address associated with the user. Does not
// necessarily hold an email address.
type Email interface{}

// The username that can be used to log in the user and can be
// used to distinguish between two equal names. Unique within
// an instance.
type Login interface{}

// User defines model for user.
type User struct {
	// Access control metadata associated with the user.
	AccessControl map[string]bool `json:"accessControl,omitempty"`

	// For external users, this contains the type of the
	// authentication provider used to authenticate the user.
	AuthLabels *[]string `json:"authLabels,omitempty"`

	// The Gravatar URL associated with the user's email.
	AvatarUrl *string `json:"avatarUrl,omitempty"`

	// Created indicates when the user was created.
	Created int64 `json:"created"`

	// The email address associated with the user. Does not
	// necessarily hold an email address.
	Email interface{} `json:"email"`

	// Numeric instance unique numeric identifier.
	Id *int64 `json:"id,omitempty"`

	// Disabled users are unable to log in.
	IsDisabled bool `json:"isDisabled"`

	// External users are authenticated through an external
	// source of authentication.
	IsExternal bool `json:"isExternal"`

	// Whether the user has the Grafana Admin flag set to grant
	// additional permissions for managing the instance.
	IsGrafanaAdmin bool `json:"isGrafanaAdmin"`

	// The username that can be used to log in the user and can be
	// used to distinguish between two equal names. Unique within
	// an instance.
	Login interface{} `json:"login"`

	// Display name, for showing in lists to end users.
	Name string `json:"name"`

	// The currently active organization for the given user.
	OrgId *int64 `json:"orgId,omitempty"`

	// User-specific theme preference.
	Theme *Theme `json:"theme,omitempty"`

	// Updated indicates when the user was most recently updated.
	Updated int64 `json:"updated"`
}

// User-specific theme preference.
type Theme string
