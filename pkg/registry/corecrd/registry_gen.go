// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by:
//     kinds/gen.go
// Using jennies:
//     CRDKindRegistryJenny
//
// Run 'make gen-cue' from repository root to regenerate.

package corecrd

import (
	"encoding/json"
	"fmt"

	enum "github.com/grafana/grafana/pkg/kinds/enum/crd"
	"github.com/grafana/grafana/pkg/kindsys/k8ssys"
	"github.com/grafana/grafana/pkg/registry/corekind"
	"gopkg.in/yaml.v3"
)

// Registry is a list of all of Grafana's core structured kinds, wrapped in a
// standard [k8ssys.CRD] interface that makes them usable for interactions
// with certain Kubernetes controller and apimachinery libraries.
//
// There are two access methods: individually via literal named methods, or as
// a slice returned from All() method.
//
// Prefer the individual named methods for use cases where the particular kind(s)
// that are needed are known to the caller. Prefer All() when performing operations
// generically across all kinds.
type Registry struct {
	all [1]k8ssys.Kind
}

// Enum returns the [k8ssys.Kind] instance for the Enum kind.
func (r *Registry) Enum() k8ssys.Kind {
	return r.all[0]
}

func doNewRegistry(breg *corekind.Base) *Registry {
	var err error
	var b []byte
	var kk k8ssys.Kind
	reg := &Registry{}

	kk = k8ssys.Kind{
		GrafanaKind: breg.Enum(),
		Object:      &enum.Enum{},
		ObjectList:  &enum.EnumList{},
	}
	// TODO Having the committed form on disk in YAML is worth doing this for now...but fix this silliness
	map0 := make(map[string]any)
	err = yaml.Unmarshal(enum.CRDYaml, map0)
	if err != nil {
		panic(fmt.Sprintf("generated CRD YAML for Enum failed to unmarshal: %s", err))
	}
	b, err = json.Marshal(map0)
	if err != nil {
		panic(fmt.Sprintf("could not re-marshal CRD JSON for Enum: %s", err))
	}
	err = json.Unmarshal(b, &kk.Schema)
	if err != nil {
		panic(fmt.Sprintf("could not unmarshal CRD JSON for Enum: %s", err))
	}
	reg.all[0] = kk

	return reg
}
