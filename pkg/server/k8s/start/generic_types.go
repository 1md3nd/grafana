/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package start

import (
	"github.com/grafana/grafana/pkg/server/k8s/builder/resource"
	"github.com/grafana/grafana/pkg/server/k8s/builder/resource/resourcerest"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +genclient
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// Generic
// +k8s:openapi-gen=true
type Generic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GenericSpec   `json:"spec,omitempty"`
	Status GenericStatus `json:"status,omitempty"`
}

// GenericList
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GenericList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`

	Items []Generic `json:"items"`
}

// GenericSpec defines the desired state of Generic
type GenericSpec struct {
	Message string `json:"message"`
	More    string `json:"more"`
}

var _ resource.Object = &Generic{}

// var _ resourcestrategy.Validater = &Generic{}
var _ resourcerest.ShortNamesProvider = &Generic{}

func (in *Generic) GetObjectMeta() *metav1.ObjectMeta {
	return &in.ObjectMeta
}

func (in *Generic) NamespaceScoped() bool {
	return false
}

func (in *Generic) New() runtime.Object {
	return &Generic{}
}

func (in *Generic) NewList() runtime.Object {
	return &GenericList{}
}

func (in *Generic) ShortNames() []string {
	return []string{}
}

func (in *Generic) GetGroupVersionResource() schema.GroupVersionResource {
	return schema.GroupVersionResource{
		Group:    "core.embedded-grafana.dev",
		Version:  "v1alpha1",
		Resource: "generics",
	}
}

func (in *Generic) IsStorageVersion() bool {
	return true
}

// func (in *Generic) Validate(ctx context.Context) field.ErrorList {
// 	// TODO(user): Modify it, adding your API validation here.
// 	return nil
// }

var _ resource.ObjectList = &GenericList{}

func (in *GenericList) GetListMeta() *metav1.ListMeta {
	return &in.ListMeta
}

// GenericStatus defines the observed state of Generic
type GenericStatus struct {
	Message string `json:"message"`
}

// Generic implements ObjectWithStatusSubResource interface.
var _ resource.ObjectWithStatusSubResource = &Generic{}

func (in *Generic) GetStatus() resource.StatusSubResource {
	return in.Status
}

// GenericStatus{} implements StatusSubResource interface.
var _ resource.StatusSubResource = &GenericStatus{}

func (in GenericStatus) CopyTo(parent resource.ObjectWithStatusSubResource) {
	parent.(*Generic).Status = in
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Generic) DeepCopyInto(out *Generic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	out.Status = in.Status
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Generic.
func (in *Generic) DeepCopy() *Generic {
	if in == nil {
		return nil
	}
	out := new(Generic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Generic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericList) DeepCopyInto(out *GenericList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Generic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericList.
func (in *GenericList) DeepCopy() *GenericList {
	if in == nil {
		return nil
	}
	out := new(GenericList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GenericList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericSpec) DeepCopyInto(out *GenericSpec) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericSpec.
func (in *GenericSpec) DeepCopy() *GenericSpec {
	if in == nil {
		return nil
	}
	out := new(GenericSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GenericStatus) DeepCopyInto(out *GenericStatus) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GenericStatus.
func (in *GenericStatus) DeepCopy() *GenericStatus {
	if in == nil {
		return nil
	}
	out := new(GenericStatus)
	in.DeepCopyInto(out)
	return out
}
