// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plugins

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessControlClient is the client API for AccessControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessControlClient interface {
	Status(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StatusResponse, error)
	RegisterPluginRoles(ctx context.Context, in *RegisterPluginRolesRequest, opts ...grpc.CallOption) (*RegisterPluginRolesResponse, error)
	HasAccess(ctx context.Context, in *HasAccessRequest, opts ...grpc.CallOption) (*HasAccessResponse, error)
}

type accessControlClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessControlClient(cc grpc.ClientConnInterface) AccessControlClient {
	return &accessControlClient{cc}
}

func (c *accessControlClient) Status(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/accesscontrol.plugins.AccessControl/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlClient) RegisterPluginRoles(ctx context.Context, in *RegisterPluginRolesRequest, opts ...grpc.CallOption) (*RegisterPluginRolesResponse, error) {
	out := new(RegisterPluginRolesResponse)
	err := c.cc.Invoke(ctx, "/accesscontrol.plugins.AccessControl/RegisterPluginRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlClient) HasAccess(ctx context.Context, in *HasAccessRequest, opts ...grpc.CallOption) (*HasAccessResponse, error) {
	out := new(HasAccessResponse)
	err := c.cc.Invoke(ctx, "/accesscontrol.plugins.AccessControl/HasAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessControlServer is the server API for AccessControl service.
// All implementations must embed UnimplementedAccessControlServer
// for forward compatibility
type AccessControlServer interface {
	Status(context.Context, *Void) (*StatusResponse, error)
	RegisterPluginRoles(context.Context, *RegisterPluginRolesRequest) (*RegisterPluginRolesResponse, error)
	HasAccess(context.Context, *HasAccessRequest) (*HasAccessResponse, error)
	mustEmbedUnimplementedAccessControlServer()
}

// UnimplementedAccessControlServer must be embedded to have forward compatible implementations.
type UnimplementedAccessControlServer struct {
}

func (UnimplementedAccessControlServer) Status(context.Context, *Void) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAccessControlServer) RegisterPluginRoles(context.Context, *RegisterPluginRolesRequest) (*RegisterPluginRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPluginRoles not implemented")
}
func (UnimplementedAccessControlServer) HasAccess(context.Context, *HasAccessRequest) (*HasAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasAccess not implemented")
}
func (UnimplementedAccessControlServer) mustEmbedUnimplementedAccessControlServer() {}

// UnsafeAccessControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessControlServer will
// result in compilation errors.
type UnsafeAccessControlServer interface {
	mustEmbedUnimplementedAccessControlServer()
}

func RegisterAccessControlServer(s grpc.ServiceRegistrar, srv AccessControlServer) {
	s.RegisterService(&AccessControl_ServiceDesc, srv)
}

func _AccessControl_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accesscontrol.plugins.AccessControl/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).Status(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControl_RegisterPluginRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPluginRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).RegisterPluginRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accesscontrol.plugins.AccessControl/RegisterPluginRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).RegisterPluginRoles(ctx, req.(*RegisterPluginRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControl_HasAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).HasAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accesscontrol.plugins.AccessControl/HasAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).HasAccess(ctx, req.(*HasAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessControl_ServiceDesc is the grpc.ServiceDesc for AccessControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accesscontrol.plugins.AccessControl",
	HandlerType: (*AccessControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _AccessControl_Status_Handler,
		},
		{
			MethodName: "RegisterPluginRoles",
			Handler:    _AccessControl_RegisterPluginRoles_Handler,
		},
		{
			MethodName: "HasAccess",
			Handler:    _AccessControl_HasAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins.proto",
}
