// Code generated by mockery v2.12.2. DO NOT EDIT.

package dashboardsnapshots

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
	dashsnapshot "github.com/grafana/grafana/pkg/services/dashboardsnapshot"

)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateDashboardSnapshot provides a mock function with given fields: _a0, _a1
func (_m *MockService) CreateDashboardSnapshot(_a0 context.Context, _a1 *dashsnapshot.CreateDashboardSnapshotCommand) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dashsnapshot.CreateDashboardSnapshotCommand) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDashboardSnapshot provides a mock function with given fields: _a0, _a1
func (_m *MockService) DeleteDashboardSnapshot(_a0 context.Context, _a1 *dashsnapshot.DeleteDashboardSnapshotCommand) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dashsnapshot.DeleteDashboardSnapshotCommand) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredSnapshots provides a mock function with given fields: _a0, _a1
func (_m *MockService) DeleteExpiredSnapshots(_a0 context.Context, _a1 *dashsnapshot.DeleteExpiredSnapshotsCommand) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dashsnapshot.DeleteExpiredSnapshotsCommand) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDashboardSnapshot provides a mock function with given fields: _a0, _a1
func (_m *MockService) GetDashboardSnapshot(_a0 context.Context, _a1 *dashsnapshot.GetDashboardSnapshotQuery) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dashsnapshot.GetDashboardSnapshotQuery) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchDashboardSnapshots provides a mock function with given fields: _a0, _a1
func (_m *MockService) SearchDashboardSnapshots(_a0 context.Context, _a1 *dashsnapshot.GetDashboardSnapshotsQuery) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dashsnapshot.GetDashboardSnapshotsQuery) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t testing.TB) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
