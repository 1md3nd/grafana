// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grafana/grafana/pkg/services/datasources (interfaces: CacheService)

// Package datasources is a generated GoMock package.
package datasources

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/grafana/grafana/pkg/models"
)

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// GetDatasource mocks base method.
func (m *MockCacheService) GetDatasource(arg0 context.Context, arg1 int64, arg2 *models.SignedInUser, arg3 bool) (*DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasource", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasource indicates an expected call of GetDatasource.
func (mr *MockCacheServiceMockRecorder) GetDatasource(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasource", reflect.TypeOf((*MockCacheService)(nil).GetDatasource), arg0, arg1, arg2, arg3)
}

// GetDatasourceByUID mocks base method.
func (m *MockCacheService) GetDatasourceByUID(arg0 context.Context, arg1 string, arg2 *models.SignedInUser, arg3 bool) (*DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasourceByUID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasourceByUID indicates an expected call of GetDatasourceByUID.
func (mr *MockCacheServiceMockRecorder) GetDatasourceByUID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasourceByUID", reflect.TypeOf((*MockCacheService)(nil).GetDatasourceByUID), arg0, arg1, arg2, arg3)
}
