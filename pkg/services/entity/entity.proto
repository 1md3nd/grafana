


// // User defined properties
// type Entity struct {
// 	Kind       string     `json:"kind" yaml:"kind"` // Must match file path conventions
// 	APIVersion string     `json:"apiVersion" yaml:"apiVersion"`
// 	Properties Properties `json:"properties" yaml:"properties"`

// 	// Augmented from the storage/entity API
// 	Metadata *Metadata `json:"meta,omitempty" yaml:"meta,omitempty"`

// 	// Body {depends on implementation}
// }

// // User defined properties save in object body
// type Properties struct {
// 	Name        string            `json:"name" yaml:"name"`
// 	Description string            `json:"description,omitempty" yaml:"description,omitempty"`
// 	Labels      map[string]string `json:"labels,omitempty" yaml:"labels,omitempty"`
// 	SecureKeys  []string          `json:"secureKeys,omitempty" yaml:"secureKeys,omitempty"`
// }

// // System defined properties
// type Metadata struct {
// 	UID       string    `json:"uid" yaml:"uid"`
// 	UpdatedBy string    `json:"updatedBy" yaml:"updatedBy"` // users who have saved that file
// 	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`
// 	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
// 	Version   string    `json:"version,omitempty" yaml:"version,omitempty"` // same as hash? etag? md5
// 	Hash      string    `json:"hash,omitempty" yaml:"hash,omitempty"`

// 	Dependencies  []string     // list of GRNs?
// 	Provinance    []Provinance // where did the entity come from
// 	AccessControl []string     // what can the request user do with this item
// }

// // Where did it come from
// type Provinance struct {
// 	When   time.Time `json:"updatedAt" yaml:"updatedAt"`
// 	Source string
// 	//...
// }



message Entity {
    string path = 1; // uid?  with slashes
    string kind = 2; // uid?  with slashes
    string apiVersion = 3; // v1  (includes container+object)

    EntityProperties props = 4;
    EntityMetadata meta = 5; // Added from the system

    // Depends on kind
    bytes body = 6;
}
  
  message EntityProperties {
    string name = 2;
    string description = 3;
    map<string,string> labels = 9;
    repeated secureKeys = 6;
  }
  
  message EntityMetadata {
    int64 createdAt = 1;
    int64 updatedBy = 2;
    string updatedBy = 3;
    string version = 4;
    string hash = 5;

    repeated string dependencies = 6;
    repeated string accessControl = 7; // list of operations the calling user can perform
  }
  
  message Provinance {
    // Unix millis when the time
    int64 when = 1;
  
    // The unique identifier of the plugin the request  originating from.
    string source = 2;
  }
  
  //---------------------------------------------------------
  // Resource service enables HTTP-style requests over gRPC.
  //---------------------------------------------------------
  
  service Resource {
    rpc CallResource(CallResourceRequest) returns (stream CallResourceResponse);
  }