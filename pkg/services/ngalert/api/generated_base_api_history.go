/*Package api contains base API implementation of unified alerting
 *
 *Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 *
 *Do not manually edit these files, please find ngalert/api/swagger-codegen/ for commands on how to generate them.
 */
package api

import (
	"net/http"

	"github.com/grafana/grafana/pkg/api/response"
	"github.com/grafana/grafana/pkg/api/routing"
	"github.com/grafana/grafana/pkg/middleware"
	"github.com/grafana/grafana/pkg/models"
	"github.com/grafana/grafana/pkg/services/ngalert/metrics"
	"github.com/grafana/grafana/pkg/web"
)

type HistoryApiForkingService interface {
	RouteGetAlertStateHistory(*models.ReqContext) response.Response
}

func (f *ForkedHistoryApi) RouteGetAlertStateHistory(ctx *models.ReqContext) response.Response {
	uIDParam := web.Params(ctx.Req)[":UID"]
	return f.forkRouteGetAlertStateHistory(ctx, uIDParam)
}

func (api *API) RegisterHistoryApiEndpoints(srv HistoryApiForkingService, m *metrics.API) {
	api.RouteRegister.Group("", func(group routing.RouteRegister) {
		group.Get(
			toMacaronPath("/api/v1/ngalert/history/grafana/rules/{UID}"),
			api.authorize(http.MethodGet, "/api/v1/ngalert/history/grafana/rules/{UID}"),
			metrics.Instrument(
				http.MethodGet,
				"/api/v1/ngalert/history/grafana/rules/{UID}",
				srv.RouteGetAlertStateHistory,
				m,
			),
		)
	}, middleware.ReqSignedIn)
}
