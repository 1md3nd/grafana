{
 "basePath": "/api",
 "consumes": [
  "application/json"
 ],
 "definitions": {
  "Ack": {},
  "Alert": {
   "title": "Alert has info for an alert."
  },
  "AlertDiscovery": {
   "title": "AlertDiscovery has info for all active alerts."
  },
  "AlertInstancesResponse": {},
  "AlertManagerNotReady": {},
  "AlertResponse": {},
  "AlertRuleGroup": {},
  "AlertRuleGroupMetadata": {},
  "AlertRuleNotificationSettings": {},
  "AlertingFileExport": {
   "title": "AlertingFileExport is the full provisioned file export."
  },
  "AlertingRule": {
   "description": "adapted from cortex"
  },
  "AlertingStatus": {},
  "Annotation": {},
  "BacktestConfig": {},
  "BacktestResult": {},
  "ContactPoints": {},
  "CookieType": {},
  "CreateLibraryElementCommand": {
   "description": "CreateLibraryElementCommand is the command for adding a LibraryElement"
  },
  "DashboardACLUpdateItem": {},
  "DataResponse": {
   "description": "A map of RefIDs (unique query identifiers) to this type makes up the Responses property of a QueryDataResponse.\nThe Error property is used to allow for partial success responses from the containing QueryDataResponse.",
   "title": "DataResponse contains the results from a DataQuery."
  },
  "DiscoveryBase": {},
  "EmbeddedContactPoint": {
   "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
  },
  "EvalQueriesPayload": {},
  "EvalQueriesResponse": {},
  "ExtendedReceiver": {},
  "Failure": {},
  "Field": {
   "description": "A Field is essentially a slice of various types with extra properties and methods.\nSee NewField() for supported types.\n\nThe slice data in the Field is a not exported, so methods on the Field are used to to manipulate its data.",
   "title": "Field represents a typed column of data within a Frame."
  },
  "ForbiddenError": {},
  "Frame": {
   "description": "Each Field is well typed by its FieldType and supports optional Labels.\n\nA Frame is a general data container for Grafana. A Frame can be table data\nor time series data depending on its content and field types.",
   "title": "Frame is a columnar data structure where each column is a Field."
  },
  "FrameLabels": {
   "description": "Labels are used to add metadata to an object.  The JSON will always be sorted keys"
  },
  "FrameMeta": {
   "description": "https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11\nNOTE -- in javascript this can accept any `[key: string]: any;` however\nthis interface only exposes the values we want to be exposed",
   "title": "FrameMeta matches:"
  },
  "Frames": {
   "description": "It is the main data container within a backend.DataResponse.\nThere should be no `nil` entries in the Frames slice (making them pointers was a mistake).",
   "title": "Frames is a slice of Frame pointers."
  },
  "GenericPublicError": {},
  "GettableAlertmanagers": {},
  "GettableGrafanaRule": {},
  "GettableNGalertConfig": {},
  "GettableRuleGroupConfig": {},
  "GettableStatus": {},
  "GettableTimeIntervals": {},
  "GettableUserConfig": {},
  "LegacyAlert": {},
  "MetricRequest": {},
  "MultiStatus": {},
  "MuteTimeInterval": {},
  "MuteTimings": {},
  "NamespaceConfigResponse": {},
  "NewApiKeyResult": {},
  "NotFound": {},
  "NotificationTemplate": {},
  "NotificationTemplates": {},
  "ObjectMatcher": {
   "title": "ObjectMatcher is a matcher that can be used to filter alerts."
  },
  "ObjectMatchers": {
   "title": "ObjectMatchers is a list of matchers that can be used to filter alerts."
  },
  "OrgMigrationState": {},
  "OrgMigrationSummary": {},
  "PatchPrefsCmd": {},
  "PermissionDenied": {},
  "PostableExtendedRuleNodeExtended": {},
  "PostableGrafanaRule": {},
  "PostableNGalertConfig": {},
  "PostableRuleGroupConfig": {},
  "PostableTimeIntervals": {},
  "PostableUserConfig": {},
  "ProvisionedAlertRules": {},
  "ResponseDetails": {},
  "Responses": {
   "description": "The QueryData method the QueryDataHandler method will set the RefId\nproperty on the DataResponses' frames based on these RefIDs.",
   "title": "Responses is a map of RefIDs (Unique Query ID) to DataResponses."
  },
  "RoleDTO": {},
  "Rule": {
   "description": "adapted from cortex"
  },
  "RuleDiscovery": {},
  "RuleGroup": {},
  "RuleGroupConfigResponse": {},
  "RuleResponse": {},
  "SmtpNotEnabled": {},
  "Success": {},
  "TestReceiverConfigResult": {},
  "TestReceiverResult": {},
  "TestReceiversResult": {},
  "TestRulePayload": {},
  "TestRuleResponse": {},
  "TestTemplatesResults": {},
  "UpdateDashboardACLCommand": {},
  "UpdatePrefsCmd": {},
  "UpdateRuleGroupResponse": {},
  "ValidationError": {},
  "alert": {
   "description": "Alert alert"
  },
  "alertGroup": {},
  "alertGroups": {},
  "alertStatus": {
   "description": "AlertStatus alert status"
  },
  "alertmanagerConfig": {
   "description": "AlertmanagerConfig alertmanager config"
  },
  "alertmanagerStatus": {
   "description": "AlertmanagerStatus alertmanager status"
  },
  "clusterStatus": {
   "description": "ClusterStatus cluster status"
  },
  "gettableAlert": {},
  "gettableAlerts": {
   "description": "GettableAlerts gettable alerts"
  },
  "gettableSilence": {
   "description": "GettableSilence gettable silence"
  },
  "gettableSilences": {},
  "integration": {
   "description": "Integration integration"
  },
  "labelSet": {
   "description": "LabelSet label set"
  },
  "matcher": {
   "description": "Matcher matcher"
  },
  "matchers": {
   "description": "Matchers matchers"
  },
  "peerStatus": {
   "description": "PeerStatus peer status"
  },
  "postSilencesOKBody": {},
  "postableAlert": {
   "description": "PostableAlert postable alert"
  },
  "postableAlerts": {
   "description": "PostableAlerts postable alerts"
  },
  "postableSilence": {},
  "receiver": {
   "description": "Receiver receiver"
  },
  "silence": {
   "description": "Silence silence"
  },
  "silenceStatus": {
   "description": "SilenceStatus silence status"
  },
  "versionInfo": {
   "description": "VersionInfo version info"
  }
 },
 "info": {
  "description": "Package definitions includes the types required for generating or consuming an OpenAPI\nspec for the Grafana Alerting API.",
  "title": "Grafana Alerting API.",
  "version": "1.1.0"
 },
 "paths": {
  "/v1/provisioning/alert-rules": {
   "get": {
    "operationId": "RouteGetAlertRules",
    "responses": {
     "200": {
      "description": "ProvisionedAlertRules",
      "schema": {
       "$ref": "#/definitions/ProvisionedAlertRules"
      }
     }
    },
    "summary": "Get all the alert rules.",
    "tags": [
     "provisioning"
    ]
   },
   "post": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePostAlertRule",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "201": {
      "$ref": "#/responses/ProvisionedAlertRule"
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Create a new alert rule.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/alert-rules/export": {
   "get": {
    "operationId": "RouteGetAlertRulesExport",
    "parameters": [
     {
      "default": false,
      "description": "Whether to initiate a download of the file or not.",
      "in": "query",
      "name": "download",
      "type": "boolean"
     },
     {
      "default": "yaml",
      "description": "Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.",
      "in": "query",
      "name": "format",
      "type": "string"
     },
     {
      "description": "UIDs of folders from which to export rules",
      "in": "query",
      "items": {
       "type": "string"
      },
      "name": "folderUid",
      "type": "array"
     },
     {
      "description": "Name of group of rules to export. Must be specified only together with a single folder UID",
      "in": "query",
      "name": "group",
      "type": "string"
     },
     {
      "description": "UID of alert rule to export. If specified, parameters folderUid and group must be empty.",
      "in": "query",
      "name": "ruleUid",
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "AlertingFileExport",
      "schema": {
       "$ref": "#/definitions/AlertingFileExport"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Export all alert rules in provisioning file format.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/alert-rules/{UID}": {
   "delete": {
    "operationId": "RouteDeleteAlertRule",
    "parameters": [
     {
      "description": "Alert rule UID",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "204": {
      "description": " The alert rule was deleted successfully."
     }
    },
    "summary": "Delete a specific alert rule by UID.",
    "tags": [
     "provisioning"
    ]
   },
   "get": {
    "operationId": "RouteGetAlertRule",
    "parameters": [
     {
      "description": "Alert rule UID",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "$ref": "#/responses/ProvisionedAlertRule"
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get a specific alert rule by UID.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutAlertRule",
    "parameters": [
     {
      "description": "Alert rule UID",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "$ref": "#/responses/ProvisionedAlertRule"
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Update an existing alert rule.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/alert-rules/{UID}/export": {
   "get": {
    "operationId": "RouteGetAlertRuleExport",
    "parameters": [
     {
      "default": false,
      "description": "Whether to initiate a download of the file or not.",
      "in": "query",
      "name": "download",
      "type": "boolean"
     },
     {
      "default": "yaml",
      "description": "Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.",
      "in": "query",
      "name": "format",
      "type": "string"
     },
     {
      "description": "Alert rule UID",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     }
    ],
    "produces": [
     "application/json",
     "application/yaml",
     "text/yaml"
    ],
    "responses": {
     "200": {
      "description": "AlertingFileExport",
      "schema": {
       "$ref": "#/definitions/AlertingFileExport"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Export an alert rule in provisioning file format.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/contact-points": {
   "get": {
    "operationId": "RouteGetContactpoints",
    "parameters": [
     {
      "description": "Filter by name",
      "in": "query",
      "name": "name",
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "ContactPoints",
      "schema": {
       "$ref": "#/definitions/ContactPoints"
      }
     }
    },
    "summary": "Get all the contact points.",
    "tags": [
     "provisioning"
    ]
   },
   "post": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePostContactpoints",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": "EmbeddedContactPoint",
      "schema": {
       "$ref": "#/definitions/EmbeddedContactPoint"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Create a contact point.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/contact-points/export": {
   "get": {
    "operationId": "RouteGetContactpointsExport",
    "parameters": [
     {
      "default": false,
      "description": "Whether to initiate a download of the file or not.",
      "in": "query",
      "name": "download",
      "type": "boolean"
     },
     {
      "default": "yaml",
      "description": "Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.",
      "in": "query",
      "name": "format",
      "type": "string"
     },
     {
      "default": false,
      "description": "Whether any contained secure settings should be decrypted or left redacted. Redacted settings will contain RedactedValue instead. Currently, only org admin can view decrypted secure settings.",
      "in": "query",
      "name": "decrypt",
      "type": "boolean"
     },
     {
      "description": "Filter by name",
      "in": "query",
      "name": "name",
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "AlertingFileExport",
      "schema": {
       "$ref": "#/definitions/AlertingFileExport"
      }
     },
     "403": {
      "description": "PermissionDenied",
      "schema": {
       "$ref": "#/definitions/PermissionDenied"
      }
     }
    },
    "summary": "Export all contact points in provisioning file format.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/contact-points/{UID}": {
   "delete": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RouteDeleteContactpoints",
    "parameters": [
     {
      "description": "UID is the contact point unique identifier",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": " The contact point was deleted successfully."
     }
    },
    "summary": "Delete a contact point.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutContactpoint",
    "parameters": [
     {
      "description": "UID is the contact point unique identifier",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Update an existing contact point.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}": {
   "delete": {
    "description": "Delete rule group",
    "operationId": "RouteDeleteAlertRuleGroup",
    "parameters": [
     {
      "in": "path",
      "name": "FolderUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Group",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "204": {
      "description": " The alert rule group was deleted successfully."
     },
     "403": {
      "description": "ForbiddenError",
      "schema": {
       "$ref": "#/definitions/ForbiddenError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "provisioning"
    ]
   },
   "get": {
    "operationId": "RouteGetAlertRuleGroup",
    "parameters": [
     {
      "in": "path",
      "name": "FolderUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Group",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "AlertRuleGroup",
      "schema": {
       "$ref": "#/definitions/AlertRuleGroup"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get a rule group.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutAlertRuleGroup",
    "parameters": [
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     },
     {
      "in": "path",
      "name": "FolderUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Group",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "200": {
      "description": "AlertRuleGroup",
      "schema": {
       "$ref": "#/definitions/AlertRuleGroup"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Update the interval of a rule group.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}/export": {
   "get": {
    "operationId": "RouteGetAlertRuleGroupExport",
    "parameters": [
     {
      "default": false,
      "description": "Whether to initiate a download of the file or not.",
      "in": "query",
      "name": "download",
      "type": "boolean"
     },
     {
      "default": "yaml",
      "description": "Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.",
      "in": "query",
      "name": "format",
      "type": "string"
     },
     {
      "in": "path",
      "name": "FolderUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Group",
      "required": true,
      "type": "string"
     }
    ],
    "produces": [
     "application/json",
     "application/yaml",
     "text/yaml"
    ],
    "responses": {
     "200": {
      "description": "AlertingFileExport",
      "schema": {
       "$ref": "#/definitions/AlertingFileExport"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Export an alert rule group in provisioning file format.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/mute-timings": {
   "get": {
    "operationId": "RouteGetMuteTimings",
    "responses": {
     "200": {
      "description": "MuteTimings",
      "schema": {
       "$ref": "#/definitions/MuteTimings"
      }
     }
    },
    "summary": "Get all the mute timings.",
    "tags": [
     "provisioning"
    ]
   },
   "post": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePostMuteTiming",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "201": {
      "description": "MuteTimeInterval",
      "schema": {
       "$ref": "#/definitions/MuteTimeInterval"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Create a new mute timing.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/mute-timings/export": {
   "get": {
    "operationId": "RouteExportMuteTimings",
    "parameters": [
     {
      "default": false,
      "description": "Whether to initiate a download of the file or not.",
      "in": "query",
      "name": "download",
      "type": "boolean"
     },
     {
      "default": "yaml",
      "description": "Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.",
      "in": "query",
      "name": "format",
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "AlertingFileExport",
      "schema": {
       "$ref": "#/definitions/AlertingFileExport"
      }
     },
     "403": {
      "description": "PermissionDenied",
      "schema": {
       "$ref": "#/definitions/PermissionDenied"
      }
     }
    },
    "summary": "Export all mute timings in provisioning format.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/mute-timings/{name}": {
   "delete": {
    "operationId": "RouteDeleteMuteTiming",
    "parameters": [
     {
      "description": "Mute timing name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "204": {
      "description": " The mute timing was deleted successfully."
     },
     "409": {
      "description": "GenericPublicError",
      "schema": {
       "$ref": "#/definitions/GenericPublicError"
      }
     }
    },
    "summary": "Delete a mute timing.",
    "tags": [
     "provisioning"
    ]
   },
   "get": {
    "operationId": "RouteGetMuteTiming",
    "parameters": [
     {
      "description": "Mute timing name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "MuteTimeInterval",
      "schema": {
       "$ref": "#/definitions/MuteTimeInterval"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get a mute timing.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutMuteTiming",
    "parameters": [
     {
      "description": "Mute timing name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": "MuteTimeInterval",
      "schema": {
       "$ref": "#/definitions/MuteTimeInterval"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Replace an existing mute timing.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/mute-timings/{name}/export": {
   "get": {
    "operationId": "RouteExportMuteTiming",
    "parameters": [
     {
      "default": false,
      "description": "Whether to initiate a download of the file or not.",
      "in": "query",
      "name": "download",
      "type": "boolean"
     },
     {
      "default": "yaml",
      "description": "Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.",
      "in": "query",
      "name": "format",
      "type": "string"
     },
     {
      "description": "Mute timing name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "AlertingFileExport",
      "schema": {
       "$ref": "#/definitions/AlertingFileExport"
      }
     },
     "403": {
      "description": "PermissionDenied",
      "schema": {
       "$ref": "#/definitions/PermissionDenied"
      }
     }
    },
    "summary": "Export a mute timing in provisioning format.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/policies": {
   "delete": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RouteResetPolicyTree",
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     }
    },
    "summary": "Clears the notification policy tree.",
    "tags": [
     "provisioning"
    ]
   },
   "get": {
    "operationId": "RouteGetPolicyTree",
    "responses": {
     "200": {
      "$ref": "#/responses/Route"
     }
    },
    "summary": "Get the notification policy tree.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutPolicyTree",
    "parameters": [
     {
      "description": "The new notification routing tree to use",
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Sets the notification policy tree.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/policies/export": {
   "get": {
    "operationId": "RouteGetPolicyTreeExport",
    "responses": {
     "200": {
      "description": "AlertingFileExport",
      "schema": {
       "$ref": "#/definitions/AlertingFileExport"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "summary": "Export the notification policy tree in provisioning file format.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/templates": {
   "get": {
    "operationId": "RouteGetTemplates",
    "responses": {
     "200": {
      "description": "NotificationTemplates",
      "schema": {
       "$ref": "#/definitions/NotificationTemplates"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get all notification templates.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/v1/provisioning/templates/{name}": {
   "delete": {
    "operationId": "RouteDeleteTemplate",
    "parameters": [
     {
      "description": "Template Name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "204": {
      "description": " The template was deleted successfully."
     }
    },
    "summary": "Delete a template.",
    "tags": [
     "provisioning"
    ]
   },
   "get": {
    "operationId": "RouteGetTemplate",
    "parameters": [
     {
      "description": "Template Name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "NotificationTemplate",
      "schema": {
       "$ref": "#/definitions/NotificationTemplate"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get a notification template.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutTemplate",
    "parameters": [
     {
      "description": "Template Name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": "NotificationTemplate",
      "schema": {
       "$ref": "#/definitions/NotificationTemplate"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Updates an existing notification template.",
    "tags": [
     "provisioning"
    ]
   }
  }
 },
 "produces": [
  "application/json"
 ],
 "responses": {
  "GetAllIntervalsResponse": {
   "description": "",
   "schema": {
    "items": {},
    "type": "array"
   }
  },
  "GetIntervalsByNameResponse": {
   "description": ""
  },
  "GetReceiverResponse": {
   "description": ""
  },
  "GetReceiversResponse": {
   "description": "",
   "schema": {
    "items": {},
    "type": "array"
   }
  },
  "GettableHistoricUserConfigs": {
   "description": "",
   "schema": {
    "items": {},
    "type": "array"
   }
  },
  "StateHistory": {
   "description": ""
  },
  "TestGrafanaRuleResponse": {
   "description": "",
   "schema": {
    "items": {},
    "type": "array"
   }
  },
  "receiversResponse": {
   "description": "",
   "schema": {
    "items": {},
    "type": "array"
   }
  }
 },
 "schemes": [
  "http",
  "https"
 ],
 "securityDefinitions": {
  "basic": {
   "type": "basic"
  }
 },
 "swagger": "2.0"
}