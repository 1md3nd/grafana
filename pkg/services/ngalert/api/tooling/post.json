{
 "basePath": "/api/v1",
 "consumes": [
  "application/json"
 ],
 "definitions": {
  "Ack": {},
  "Alert": {
   "title": "Alert has info for an alert."
  },
  "AlertDiscovery": {
   "title": "AlertDiscovery has info for all active alerts."
  },
  "AlertInstancesResponse": {},
  "AlertManagerNotReady": {},
  "AlertResponse": {},
  "AlertRuleGroup": {},
  "AlertRuleGroupMetadata": {},
  "AlertingRule": {
   "description": "adapted from cortex"
  },
  "AlertingStatus": {},
  "ContactPoints": {},
  "DataResponse": {
   "description": "A map of RefIDs (unique query identifiers) to this type makes up the Responses property of a QueryDataResponse.\nThe Error property is used to allow for partial success responses from the containing QueryDataResponse.",
   "title": "DataResponse contains the results from a DataQuery."
  },
  "DiscoveryBase": {},
  "EmbeddedContactPoint": {
   "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
  },
  "EvalQueriesPayload": {},
  "EvalQueriesResponse": {},
  "ExtendedReceiver": {},
  "Failure": {},
  "Field": {
   "description": "A Field is essentially a slice of various types with extra properties and methods.\nSee NewField() for supported types.\n\nThe slice data in the Field is a not exported, so methods on the Field are used to to manipulate its data.",
   "title": "Field represents a typed column of data within a Frame."
  },
  "Frame": {
   "description": "Each Field is well typed by its FieldType and supports optional Labels.\n\nA Frame is a general data container for Grafana. A Frame can be table data\nor time series data depending on its content and field types.",
   "title": "Frame is a columnar data structure where each column is a Field."
  },
  "FrameLabels": {
   "description": "Labels are used to add metadata to an object.  The JSON will always be sorted keys"
  },
  "FrameMeta": {
   "description": "https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11\nNOTE -- in javascript this can accept any `[key: string]: any;` however\nthis interface only exposes the values we want to be exposed",
   "title": "FrameMeta matches:"
  },
  "Frames": {
   "description": "It is the main data container within a backend.DataResponse.",
   "title": "Frames is a slice of Frame pointers."
  },
  "GettableAlertmanagers": {},
  "GettableGrafanaRule": {},
  "GettableNGalertConfig": {},
  "GettableRuleGroupConfig": {},
  "GettableStatus": {},
  "GettableUserConfig": {},
  "GettableUserConfigs": {},
  "LegacyAlert": {},
  "MessageTemplate": {},
  "MessageTemplates": {},
  "MultiStatus": {},
  "MuteTimeInterval": {},
  "MuteTimings": {},
  "NamespaceConfigResponse": {},
  "NotFound": {},
  "PermissionDenied": {},
  "PostableGrafanaRule": {},
  "PostableNGalertConfig": {},
  "PostableRuleGroupConfig": {},
  "PostableUserConfig": {},
  "ResponseDetails": {},
  "Responses": {
   "description": "The QueryData method the QueryDataHandler method will set the RefId\nproperty on the DataResponses' frames based on these RefIDs.",
   "title": "Responses is a map of RefIDs (Unique Query ID) to DataResponses."
  },
  "Rule": {
   "description": "adapted from cortex"
  },
  "RuleDiscovery": {},
  "RuleGroup": {},
  "RuleGroupConfigResponse": {},
  "RuleResponse": {},
  "SmtpNotEnabled": {},
  "Success": {},
  "TestReceiverConfigResult": {},
  "TestReceiverResult": {},
  "TestReceiversResult": {},
  "TestRulePayload": {},
  "TestRuleResponse": {},
  "ValidationError": {},
  "alert": {
   "description": "Alert alert"
  },
  "alertGroup": {},
  "alertGroups": {},
  "alertStatus": {
   "description": "AlertStatus alert status"
  },
  "alertmanagerConfig": {
   "description": "AlertmanagerConfig alertmanager config"
  },
  "alertmanagerStatus": {
   "description": "AlertmanagerStatus alertmanager status"
  },
  "clusterStatus": {
   "description": "ClusterStatus cluster status"
  },
  "gettableAlert": {
   "description": "GettableAlert gettable alert"
  },
  "gettableAlerts": {
   "description": "GettableAlerts gettable alerts"
  },
  "gettableSilence": {
   "description": "GettableSilence gettable silence"
  },
  "gettableSilences": {},
  "integration": {
   "description": "Integration integration"
  },
  "labelSet": {
   "description": "LabelSet label set"
  },
  "matcher": {
   "description": "Matcher matcher"
  },
  "matchers": {
   "description": "Matchers matchers"
  },
  "peerStatus": {
   "description": "PeerStatus peer status"
  },
  "postSilencesOKBody": {},
  "postableAlert": {
   "description": "PostableAlert postable alert"
  },
  "postableAlerts": {
   "description": "PostableAlerts postable alerts"
  },
  "postableSilence": {},
  "receiver": {},
  "silence": {
   "description": "Silence silence"
  },
  "silenceStatus": {
   "description": "SilenceStatus silence status"
  },
  "versionInfo": {
   "description": "VersionInfo version info"
  }
 },
 "info": {
  "description": "Package definitions includes the types required for generating or consuming an OpenAPI\nspec for the Grafana Alerting API.",
  "title": "Grafana Alerting API.",
  "version": "1.1.0"
 },
 "paths": {
  "/api/alertmanager/grafana/api/v2/alerts": {
   "get": {
    "description": "get alertmanager alerts",
    "operationId": "RouteGetGrafanaAMAlerts",
    "parameters": [
     {
      "default": true,
      "description": "Show active alerts",
      "in": "query",
      "name": "active",
      "type": "boolean"
     },
     {
      "default": true,
      "description": "Show silenced alerts",
      "in": "query",
      "name": "silenced",
      "type": "boolean"
     },
     {
      "default": true,
      "description": "Show inhibited alerts",
      "in": "query",
      "name": "inhibited",
      "type": "boolean"
     },
     {
      "description": "A list of matchers to filter alerts by",
      "in": "query",
      "items": {
       "type": "string"
      },
      "name": "filter",
      "type": "array"
     },
     {
      "description": "A regex matching receivers to filter alerts by",
      "in": "query",
      "name": "receiver",
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "gettableAlerts",
      "schema": {
       "$ref": "#/definitions/gettableAlerts"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/grafana/api/v2/alerts/groups": {
   "get": {
    "description": "get alertmanager alerts",
    "operationId": "RouteGetGrafanaAMAlertGroups",
    "parameters": [
     {
      "default": true,
      "description": "Show active alerts",
      "in": "query",
      "name": "active",
      "type": "boolean"
     },
     {
      "default": true,
      "description": "Show silenced alerts",
      "in": "query",
      "name": "silenced",
      "type": "boolean"
     },
     {
      "default": true,
      "description": "Show inhibited alerts",
      "in": "query",
      "name": "inhibited",
      "type": "boolean"
     },
     {
      "description": "A list of matchers to filter alerts by",
      "in": "query",
      "items": {
       "type": "string"
      },
      "name": "filter",
      "type": "array"
     },
     {
      "description": "A regex matching receivers to filter alerts by",
      "in": "query",
      "name": "receiver",
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "alertGroups",
      "schema": {
       "$ref": "#/definitions/alertGroups"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/grafana/api/v2/silence/{SilenceId}": {
   "delete": {
    "description": "delete silence",
    "operationId": "RouteDeleteGrafanaSilence",
    "parameters": [
     {
      "in": "path",
      "name": "SilenceId",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   },
   "get": {
    "description": "get silence",
    "operationId": "RouteGetGrafanaSilence",
    "parameters": [
     {
      "in": "path",
      "name": "SilenceId",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "gettableSilence",
      "schema": {
       "$ref": "#/definitions/gettableSilence"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/grafana/api/v2/silences": {
   "get": {
    "description": "get silences",
    "operationId": "RouteGetGrafanaSilences",
    "parameters": [
     {
      "in": "query",
      "items": {
       "type": "string"
      },
      "name": "filter",
      "type": "array"
     }
    ],
    "responses": {
     "200": {
      "description": "gettableSilences",
      "schema": {
       "$ref": "#/definitions/gettableSilences"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   },
   "post": {
    "description": "create silence",
    "operationId": "RouteCreateGrafanaSilence",
    "parameters": [
     {
      "in": "body",
      "name": "Silence",
      "schema": {}
     }
    ],
    "responses": {
     "201": {
      "description": "postSilencesOKBody",
      "schema": {
       "$ref": "#/definitions/postSilencesOKBody"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/grafana/api/v2/status": {
   "get": {
    "description": "get alertmanager status and configuration",
    "operationId": "RouteGetGrafanaAMStatus",
    "responses": {
     "200": {
      "description": "GettableStatus",
      "schema": {
       "$ref": "#/definitions/GettableStatus"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/grafana/config/api/v1/alerts": {
   "delete": {
    "description": "deletes the Alerting config for a tenant",
    "operationId": "RouteDeleteGrafanaAlertingConfig",
    "responses": {
     "200": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   },
   "get": {
    "description": "gets an Alerting config",
    "operationId": "RouteGetGrafanaAlertingConfig",
    "responses": {
     "200": {
      "description": "GettableUserConfig",
      "schema": {
       "$ref": "#/definitions/GettableUserConfig"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   },
   "post": {
    "description": "sets an Alerting config",
    "operationId": "RoutePostGrafanaAlertingConfig",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "201": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/grafana/config/api/v1/alerts/successfully-applied": {
   "get": {
    "description": "gets Alerting configurations that were successfully applied in the past",
    "operationId": "RouteGetGrafanaSuccessfullyAppliedAlertingConfigs",
    "parameters": [
     {
      "description": "Limit response to X number of alerting configurations.",
      "format": "int64",
      "in": "query",
      "name": "limit",
      "required": true,
      "type": "integer"
     }
    ],
    "responses": {
     "200": {
      "description": "GettableUserConfigs",
      "schema": {
       "$ref": "#/definitions/GettableUserConfigs"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/grafana/config/api/v1/receivers": {
   "get": {
    "description": "Get a list of all receivers",
    "operationId": "RouteGetGrafanaReceivers",
    "responses": {
     "200": {
      "$ref": "#/responses/receiversResponse"
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/grafana/config/api/v1/receivers/test": {
   "post": {
    "operationId": "RoutePostTestGrafanaReceivers",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "200": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "207": {
      "description": "MultiStatus",
      "schema": {
       "$ref": "#/definitions/MultiStatus"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "403": {
      "description": "PermissionDenied",
      "schema": {
       "$ref": "#/definitions/PermissionDenied"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     },
     "408": {
      "description": "Failure",
      "schema": {
       "$ref": "#/definitions/Failure"
      }
     },
     "409": {
      "description": "AlertManagerNotReady",
      "schema": {
       "$ref": "#/definitions/AlertManagerNotReady"
      }
     }
    },
    "summary": "Test Grafana managed receivers without saving them.",
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/{DatasourceUID}/api/v2/alerts": {
   "get": {
    "description": "get alertmanager alerts",
    "operationId": "RouteGetAMAlerts",
    "parameters": [
     {
      "default": true,
      "description": "Show active alerts",
      "in": "query",
      "name": "active",
      "type": "boolean"
     },
     {
      "default": true,
      "description": "Show silenced alerts",
      "in": "query",
      "name": "silenced",
      "type": "boolean"
     },
     {
      "default": true,
      "description": "Show inhibited alerts",
      "in": "query",
      "name": "inhibited",
      "type": "boolean"
     },
     {
      "description": "A list of matchers to filter alerts by",
      "in": "query",
      "items": {
       "type": "string"
      },
      "name": "filter",
      "type": "array"
     },
     {
      "description": "A regex matching receivers to filter alerts by",
      "in": "query",
      "name": "receiver",
      "type": "string"
     },
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "gettableAlerts",
      "schema": {
       "$ref": "#/definitions/gettableAlerts"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   },
   "post": {
    "description": "create alertmanager alerts",
    "operationId": "RoutePostAMAlerts",
    "parameters": [
     {
      "in": "body",
      "name": "PostableAlerts",
      "schema": {
       "items": {},
       "type": "array"
      }
     },
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/{DatasourceUID}/api/v2/alerts/groups": {
   "get": {
    "description": "get alertmanager alerts",
    "operationId": "RouteGetAMAlertGroups",
    "parameters": [
     {
      "default": true,
      "description": "Show active alerts",
      "in": "query",
      "name": "active",
      "type": "boolean"
     },
     {
      "default": true,
      "description": "Show silenced alerts",
      "in": "query",
      "name": "silenced",
      "type": "boolean"
     },
     {
      "default": true,
      "description": "Show inhibited alerts",
      "in": "query",
      "name": "inhibited",
      "type": "boolean"
     },
     {
      "description": "A list of matchers to filter alerts by",
      "in": "query",
      "items": {
       "type": "string"
      },
      "name": "filter",
      "type": "array"
     },
     {
      "description": "A regex matching receivers to filter alerts by",
      "in": "query",
      "name": "receiver",
      "type": "string"
     },
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "alertGroups",
      "schema": {
       "$ref": "#/definitions/alertGroups"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/{DatasourceUID}/api/v2/silence/{SilenceId}": {
   "delete": {
    "description": "delete silence",
    "operationId": "RouteDeleteSilence",
    "parameters": [
     {
      "in": "path",
      "name": "SilenceId",
      "required": true,
      "type": "string"
     },
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   },
   "get": {
    "description": "get silence",
    "operationId": "RouteGetSilence",
    "parameters": [
     {
      "in": "path",
      "name": "SilenceId",
      "required": true,
      "type": "string"
     },
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "gettableSilence",
      "schema": {
       "$ref": "#/definitions/gettableSilence"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/{DatasourceUID}/api/v2/silences": {
   "get": {
    "description": "get silences",
    "operationId": "RouteGetSilences",
    "parameters": [
     {
      "in": "query",
      "items": {
       "type": "string"
      },
      "name": "filter",
      "type": "array"
     },
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "gettableSilences",
      "schema": {
       "$ref": "#/definitions/gettableSilences"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   },
   "post": {
    "description": "create silence",
    "operationId": "RouteCreateSilence",
    "parameters": [
     {
      "in": "body",
      "name": "Silence",
      "schema": {}
     },
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "201": {
      "description": "postSilencesOKBody",
      "schema": {
       "$ref": "#/definitions/postSilencesOKBody"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/{DatasourceUID}/api/v2/status": {
   "get": {
    "description": "get alertmanager status and configuration",
    "operationId": "RouteGetAMStatus",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "GettableStatus",
      "schema": {
       "$ref": "#/definitions/GettableStatus"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/alertmanager/{DatasourceUID}/config/api/v1/alerts": {
   "delete": {
    "description": "deletes the Alerting config for a tenant",
    "operationId": "RouteDeleteAlertingConfig",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   },
   "get": {
    "description": "gets an Alerting config",
    "operationId": "RouteGetAlertingConfig",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "GettableUserConfig",
      "schema": {
       "$ref": "#/definitions/GettableUserConfig"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   },
   "post": {
    "description": "sets an Alerting config",
    "operationId": "RoutePostAlertingConfig",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "201": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "alertmanager"
    ]
   }
  },
  "/api/prometheus/grafana/api/v1/alerts": {
   "get": {
    "description": "gets the current alerts",
    "operationId": "RouteGetGrafanaAlertStatuses",
    "parameters": [
     {
      "default": false,
      "description": "Include Grafana specific labels as part of the response.",
      "in": "query",
      "name": "includeInternalLabels",
      "type": "boolean"
     }
    ],
    "responses": {
     "200": {
      "description": "AlertResponse",
      "schema": {
       "$ref": "#/definitions/AlertResponse"
      }
     }
    },
    "tags": [
     "prometheus"
    ]
   }
  },
  "/api/prometheus/grafana/api/v1/rules": {
   "get": {
    "description": "gets the evaluation statuses of all rules",
    "operationId": "RouteGetGrafanaRuleStatuses",
    "parameters": [
     {
      "default": false,
      "description": "Include Grafana specific labels as part of the response.",
      "in": "query",
      "name": "includeInternalLabels",
      "type": "boolean"
     },
     {
      "description": "Filter the list of rules to those that belong to the specified dashboard UID.",
      "in": "query",
      "name": "DashboardUID",
      "type": "string"
     },
     {
      "description": "Filter the list of rules to those that belong to the specified panel ID. Dashboard UID must be specified.",
      "format": "int64",
      "in": "query",
      "name": "PanelID",
      "type": "integer"
     }
    ],
    "responses": {
     "200": {
      "description": "RuleResponse",
      "schema": {
       "$ref": "#/definitions/RuleResponse"
      }
     }
    },
    "tags": [
     "prometheus"
    ]
   }
  },
  "/api/prometheus/{DatasourceUID}/api/v1/alerts": {
   "get": {
    "description": "gets the current alerts",
    "operationId": "RouteGetAlertStatuses",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "AlertResponse",
      "schema": {
       "$ref": "#/definitions/AlertResponse"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "prometheus"
    ]
   }
  },
  "/api/prometheus/{DatasourceUID}/api/v1/rules": {
   "get": {
    "description": "gets the evaluation statuses of all rules",
    "operationId": "RouteGetRuleStatuses",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "RuleResponse",
      "schema": {
       "$ref": "#/definitions/RuleResponse"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "prometheus"
    ]
   }
  },
  "/api/ruler/grafana/api/v1/rules": {
   "get": {
    "description": "List rule groups",
    "operationId": "RouteGetGrafanaRulesConfig",
    "parameters": [
     {
      "in": "query",
      "name": "DashboardUID",
      "type": "string"
     },
     {
      "format": "int64",
      "in": "query",
      "name": "PanelID",
      "type": "integer"
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "202": {
      "description": "NamespaceConfigResponse",
      "schema": {
       "$ref": "#/definitions/NamespaceConfigResponse"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   }
  },
  "/api/ruler/grafana/api/v1/rules/{Namespace}": {
   "delete": {
    "description": "Delete namespace",
    "operationId": "RouteDeleteNamespaceGrafanaRulesConfig",
    "parameters": [
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   },
   "get": {
    "description": "Get rule groups by namespace",
    "operationId": "RouteGetNamespaceGrafanaRulesConfig",
    "parameters": [
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "202": {
      "description": "NamespaceConfigResponse",
      "schema": {
       "$ref": "#/definitions/NamespaceConfigResponse"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   },
   "post": {
    "consumes": [
     "application/json",
     "application/yaml"
    ],
    "description": "Creates or updates a rule group",
    "operationId": "RoutePostNameGrafanaRulesConfig",
    "parameters": [
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   }
  },
  "/api/ruler/grafana/api/v1/rules/{Namespace}/{Groupname}": {
   "delete": {
    "description": "Delete rule group",
    "operationId": "RouteDeleteGrafanaRuleGroupConfig",
    "parameters": [
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Groupname",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   },
   "get": {
    "description": "Get rule group",
    "operationId": "RouteGetGrafanaRuleGroupConfig",
    "parameters": [
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Groupname",
      "required": true,
      "type": "string"
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "202": {
      "description": "RuleGroupConfigResponse",
      "schema": {
       "$ref": "#/definitions/RuleGroupConfigResponse"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   }
  },
  "/api/ruler/{DatasourceUID}/api/v1/rules": {
   "get": {
    "description": "List rule groups",
    "operationId": "RouteGetRulesConfig",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "query",
      "name": "DashboardUID",
      "type": "string"
     },
     {
      "format": "int64",
      "in": "query",
      "name": "PanelID",
      "type": "integer"
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "202": {
      "description": "NamespaceConfigResponse",
      "schema": {
       "$ref": "#/definitions/NamespaceConfigResponse"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   }
  },
  "/api/ruler/{DatasourceUID}/api/v1/rules/{Namespace}": {
   "delete": {
    "description": "Delete namespace",
    "operationId": "RouteDeleteNamespaceRulesConfig",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   },
   "get": {
    "description": "Get rule groups by namespace",
    "operationId": "RouteGetNamespaceRulesConfig",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "202": {
      "description": "NamespaceConfigResponse",
      "schema": {
       "$ref": "#/definitions/NamespaceConfigResponse"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   },
   "post": {
    "consumes": [
     "application/json",
     "application/yaml"
    ],
    "description": "Creates or updates a rule group",
    "operationId": "RoutePostNameRulesConfig",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   }
  },
  "/api/ruler/{DatasourceUID}/api/v1/rules/{Namespace}/{Groupname}": {
   "delete": {
    "description": "Delete rule group",
    "operationId": "RouteDeleteRuleGroupConfig",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Groupname",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   },
   "get": {
    "description": "Get rule group",
    "operationId": "RouteGetRulegGroupConfig",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Namespace",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Groupname",
      "required": true,
      "type": "string"
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "202": {
      "description": "RuleGroupConfigResponse",
      "schema": {
       "$ref": "#/definitions/RuleGroupConfigResponse"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "ruler"
    ]
   }
  },
  "/api/v1/eval": {
   "post": {
    "consumes": [
     "application/json"
    ],
    "description": "Test rule",
    "operationId": "RouteEvalQueries",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "200": {
      "description": "EvalQueriesResponse",
      "schema": {
       "$ref": "#/definitions/EvalQueriesResponse"
      }
     }
    },
    "tags": [
     "testing"
    ]
   }
  },
  "/api/v1/ngalert": {
   "get": {
    "description": "Get the status of the alerting engine",
    "operationId": "RouteGetStatus",
    "produces": [
     "application/json"
    ],
    "responses": {
     "200": {
      "description": "AlertingStatus",
      "schema": {
       "$ref": "#/definitions/AlertingStatus"
      }
     }
    },
    "tags": [
     "configuration"
    ]
   }
  },
  "/api/v1/ngalert/admin_config": {
   "delete": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RouteDeleteNGalertConfig",
    "responses": {
     "200": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "500": {
      "description": "Failure",
      "schema": {
       "$ref": "#/definitions/Failure"
      }
     }
    },
    "summary": "Deletes the NGalert configuration of the user's organization.",
    "tags": [
     "configuration"
    ]
   },
   "get": {
    "operationId": "RouteGetNGalertConfig",
    "produces": [
     "application/json"
    ],
    "responses": {
     "200": {
      "description": "GettableNGalertConfig",
      "schema": {
       "$ref": "#/definitions/GettableNGalertConfig"
      }
     },
     "404": {
      "description": "Failure",
      "schema": {
       "$ref": "#/definitions/Failure"
      }
     },
     "500": {
      "description": "Failure",
      "schema": {
       "$ref": "#/definitions/Failure"
      }
     }
    },
    "summary": "Get the NGalert configuration of the user's organization, returns 404 if no configuration is present.",
    "tags": [
     "configuration"
    ]
   },
   "post": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePostNGalertConfig",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "201": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Creates or updates the NGalert configuration of the user's organization. If no value is sent for alertmanagersChoice, it defaults to \"all\".",
    "tags": [
     "configuration"
    ]
   }
  },
  "/api/v1/ngalert/alertmanagers": {
   "get": {
    "operationId": "RouteGetAlertmanagers",
    "produces": [
     "application/json"
    ],
    "responses": {
     "200": {
      "description": "GettableAlertmanagers",
      "schema": {
       "$ref": "#/definitions/GettableAlertmanagers"
      }
     }
    },
    "summary": "Get the discovered and dropped Alertmanagers of the user's organization based on the specified configuration.",
    "tags": [
     "configuration"
    ]
   }
  },
  "/api/v1/provisioning/alert-rules": {
   "post": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePostAlertRule",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "201": {
      "$ref": "#/responses/ProvisionedAlertRule"
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Create a new alert rule.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/provisioning/alert-rules/{UID}": {
   "delete": {
    "operationId": "RouteDeleteAlertRule",
    "parameters": [
     {
      "description": "Alert rule UID",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "204": {
      "description": " The alert rule was deleted successfully."
     }
    },
    "summary": "Delete a specific alert rule by UID.",
    "tags": [
     "provisioning"
    ]
   },
   "get": {
    "operationId": "RouteGetAlertRule",
    "parameters": [
     {
      "description": "Alert rule UID",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "$ref": "#/responses/ProvisionedAlertRule"
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get a specific alert rule by UID.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutAlertRule",
    "parameters": [
     {
      "description": "Alert rule UID",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     },
     {
      "in": "header",
      "name": "X-Disable-Provenance",
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "$ref": "#/responses/ProvisionedAlertRule"
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Update an existing alert rule.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/provisioning/contact-points": {
   "get": {
    "operationId": "RouteGetContactpoints",
    "parameters": [
     {
      "description": "Filter by name",
      "in": "query",
      "name": "name",
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "ContactPoints",
      "schema": {
       "$ref": "#/definitions/ContactPoints"
      }
     }
    },
    "summary": "Get all the contact points.",
    "tags": [
     "provisioning"
    ]
   },
   "post": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePostContactpoints",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "202": {
      "description": "EmbeddedContactPoint",
      "schema": {
       "$ref": "#/definitions/EmbeddedContactPoint"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Create a contact point.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/provisioning/contact-points/{UID}": {
   "delete": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RouteDeleteContactpoints",
    "parameters": [
     {
      "description": "UID is the contact point unique identifier",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "204": {
      "description": " The contact point was deleted successfully."
     }
    },
    "summary": "Delete a contact point.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutContactpoint",
    "parameters": [
     {
      "description": "UID is the contact point unique identifier",
      "in": "path",
      "name": "UID",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Update an existing contact point.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}": {
   "get": {
    "operationId": "RouteGetAlertRuleGroup",
    "parameters": [
     {
      "in": "path",
      "name": "FolderUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Group",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "AlertRuleGroup",
      "schema": {
       "$ref": "#/definitions/AlertRuleGroup"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get a rule group.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutAlertRuleGroup",
    "parameters": [
     {
      "in": "path",
      "name": "FolderUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "path",
      "name": "Group",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "200": {
      "description": "AlertRuleGroup",
      "schema": {
       "$ref": "#/definitions/AlertRuleGroup"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Update the interval of a rule group.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/provisioning/mute-timings": {
   "get": {
    "operationId": "RouteGetMuteTimings",
    "responses": {
     "200": {
      "description": "MuteTimings",
      "schema": {
       "$ref": "#/definitions/MuteTimings"
      }
     }
    },
    "summary": "Get all the mute timings.",
    "tags": [
     "provisioning"
    ]
   },
   "post": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePostMuteTiming",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "201": {
      "description": "MuteTimeInterval",
      "schema": {
       "$ref": "#/definitions/MuteTimeInterval"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Create a new mute timing.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/provisioning/mute-timings/{name}": {
   "delete": {
    "operationId": "RouteDeleteMuteTiming",
    "parameters": [
     {
      "description": "Mute timing name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "204": {
      "description": " The mute timing was deleted successfully."
     }
    },
    "summary": "Delete a mute timing.",
    "tags": [
     "provisioning"
    ]
   },
   "get": {
    "operationId": "RouteGetMuteTiming",
    "parameters": [
     {
      "description": "Mute timing name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "MuteTimeInterval",
      "schema": {
       "$ref": "#/definitions/MuteTimeInterval"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get a mute timing.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutMuteTiming",
    "parameters": [
     {
      "description": "Mute timing name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "200": {
      "description": "MuteTimeInterval",
      "schema": {
       "$ref": "#/definitions/MuteTimeInterval"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Replace an existing mute timing.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/provisioning/policies": {
   "delete": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RouteResetPolicyTree",
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     }
    },
    "summary": "Clears the notification policy tree.",
    "tags": [
     "provisioning"
    ]
   },
   "get": {
    "operationId": "RouteGetPolicyTree",
    "responses": {
     "200": {
      "$ref": "#/responses/Route"
     }
    },
    "summary": "Get the notification policy tree.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutPolicyTree",
    "parameters": [
     {
      "description": "The new notification routing tree to use",
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "202": {
      "description": "Ack",
      "schema": {
       "$ref": "#/definitions/Ack"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Sets the notification policy tree.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/provisioning/templates": {
   "get": {
    "operationId": "RouteGetTemplates",
    "responses": {
     "200": {
      "description": "MessageTemplates",
      "schema": {
       "$ref": "#/definitions/MessageTemplates"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get all message templates.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/provisioning/templates/{name}": {
   "delete": {
    "operationId": "RouteDeleteTemplate",
    "parameters": [
     {
      "description": "Template Name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "204": {
      "description": " The template was deleted successfully."
     }
    },
    "summary": "Delete a template.",
    "tags": [
     "provisioning"
    ]
   },
   "get": {
    "operationId": "RouteGetTemplate",
    "parameters": [
     {
      "description": "Template Name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     }
    ],
    "responses": {
     "200": {
      "description": "MessageTemplate",
      "schema": {
       "$ref": "#/definitions/MessageTemplate"
      }
     },
     "404": {
      "description": " Not found."
     }
    },
    "summary": "Get a message template.",
    "tags": [
     "provisioning"
    ]
   },
   "put": {
    "consumes": [
     "application/json"
    ],
    "operationId": "RoutePutTemplate",
    "parameters": [
     {
      "description": "Template Name",
      "in": "path",
      "name": "name",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "responses": {
     "202": {
      "description": "MessageTemplate",
      "schema": {
       "$ref": "#/definitions/MessageTemplate"
      }
     },
     "400": {
      "description": "ValidationError",
      "schema": {
       "$ref": "#/definitions/ValidationError"
      }
     }
    },
    "summary": "Updates an existing template.",
    "tags": [
     "provisioning"
    ]
   }
  },
  "/api/v1/rule/test/grafana": {
   "post": {
    "consumes": [
     "application/json"
    ],
    "description": "Test a rule against Grafana ruler",
    "operationId": "RouteTestRuleGrafanaConfig",
    "parameters": [
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "200": {
      "description": "TestRuleResponse",
      "schema": {
       "$ref": "#/definitions/TestRuleResponse"
      }
     }
    },
    "tags": [
     "testing"
    ]
   }
  },
  "/api/v1/rule/test/{DatasourceUID}": {
   "post": {
    "consumes": [
     "application/json"
    ],
    "description": "Test a rule against external data source ruler",
    "operationId": "RouteTestRuleConfig",
    "parameters": [
     {
      "description": "DatasoureUID should be the datasource UID identifier",
      "in": "path",
      "name": "DatasourceUID",
      "required": true,
      "type": "string"
     },
     {
      "in": "body",
      "name": "Body",
      "schema": {}
     }
    ],
    "produces": [
     "application/json"
    ],
    "responses": {
     "200": {
      "description": "TestRuleResponse",
      "schema": {
       "$ref": "#/definitions/TestRuleResponse"
      }
     },
     "404": {
      "description": "NotFound",
      "schema": {
       "$ref": "#/definitions/NotFound"
      }
     }
    },
    "tags": [
     "testing"
    ]
   }
  }
 },
 "produces": [
  "application/json"
 ],
 "responses": {
  "receiversResponse": {
   "description": "",
   "schema": {
    "items": {},
    "type": "array"
   }
  }
 },
 "schemes": [
  "http",
  "https"
 ],
 "securityDefinitions": {
  "basic": {
   "type": "basic"
  }
 },
 "swagger": "2.0"
}