{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)\nSchemes:\nhttp",
    "title": "Alertmanager API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "host": "localhost",
  "basePath": "/api/v2/",
  "paths": {
    "/alerts": {
      "get": {
        "description": "Get a list of alerts",
        "tags": [
          "alert"
        ],
        "operationId": "getAlerts",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "Active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A list of matchers to filter alerts by",
            "name": "Filter",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "Inhibited",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "Receiver",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "Silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show unprocessed alerts",
            "name": "Unprocessed",
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Create new Alerts",
        "tags": [
          "alert"
        ],
        "operationId": "postAlerts",
        "parameters": [
          {
            "description": "The alerts to create",
            "name": "Alerts",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ]
      }
    },
    "/alerts/groups": {
      "get": {
        "description": "Get a list of alert groups",
        "tags": [
          "alertgroup"
        ],
        "operationId": "getAlertGroups",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "Active",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A list of matchers to filter alerts by",
            "name": "Filter",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "Inhibited",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "Receiver",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "Silenced",
            "in": "query"
          }
        ]
      }
    },
    "/api/alertmanager/grafana/api/v2/alerts": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetGrafanaAMAlerts",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of matchers to filter alerts by",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "receiver",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "gettableAlerts",
            "schema": {
              "$ref": "#/definitions/gettableAlerts"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/grafana/api/v2/alerts/groups": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetGrafanaAMAlertGroups",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of matchers to filter alerts by",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "receiver",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "alertGroups",
            "schema": {
              "$ref": "#/definitions/alertGroups"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/grafana/api/v2/silence/{SilenceId}": {
      "get": {
        "description": "get silence",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetGrafanaSilence",
        "parameters": [
          {
            "type": "string",
            "name": "SilenceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "gettableSilence",
            "schema": {
              "$ref": "#/definitions/gettableSilence"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "description": "delete silence",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteDeleteGrafanaSilence",
        "parameters": [
          {
            "type": "string",
            "name": "SilenceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/grafana/api/v2/silences": {
      "get": {
        "description": "get silences",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetGrafanaSilences",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "gettableSilences",
            "schema": {
              "$ref": "#/definitions/gettableSilences"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "post": {
        "description": "create silence",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteCreateGrafanaSilence",
        "parameters": [
          {
            "name": "Silence",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "postSilencesOKBody",
            "schema": {
              "$ref": "#/definitions/postSilencesOKBody"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/grafana/api/v2/status": {
      "get": {
        "description": "get alertmanager status and configuration",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetGrafanaAMStatus",
        "responses": {
          "200": {
            "description": "GettableStatus",
            "schema": {
              "$ref": "#/definitions/GettableStatus"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/grafana/config/api/v1/alerts": {
      "get": {
        "description": "gets an Alerting config",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetGrafanaAlertingConfig",
        "responses": {
          "200": {
            "description": "GettableUserConfig",
            "schema": {
              "$ref": "#/definitions/GettableUserConfig"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "post": {
        "description": "sets an Alerting config",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RoutePostGrafanaAlertingConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "description": "deletes the Alerting config for a tenant",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteDeleteGrafanaAlertingConfig",
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/alertmanager/grafana/config/api/v1/receivers": {
      "get": {
        "description": "Get a list of all receivers",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetGrafanaReceivers",
        "responses": {
          "200": {
            "$ref": "#/responses/receiversResponse"
          }
        }
      }
    },
    "/api/alertmanager/grafana/config/api/v1/receivers/test": {
      "post": {
        "tags": [
          "alertmanager"
        ],
        "summary": "Test Grafana managed receivers without saving them.",
        "operationId": "RoutePostTestGrafanaReceivers",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "207": {
            "description": "MultiStatus",
            "schema": {
              "$ref": "#/definitions/MultiStatus"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "403": {
            "description": "PermissionDenied",
            "schema": {
              "$ref": "#/definitions/PermissionDenied"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "408": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "409": {
            "description": "AlertManagerNotReady",
            "schema": {
              "$ref": "#/definitions/AlertManagerNotReady"
            }
          }
        }
      }
    },
    "/api/alertmanager/{DatasourceUID}/api/v2/alerts": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAMAlerts",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of matchers to filter alerts by",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "receiver",
            "in": "query"
          },
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "gettableAlerts",
            "schema": {
              "$ref": "#/definitions/gettableAlerts"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      },
      "post": {
        "description": "create alertmanager alerts",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RoutePostAMAlerts",
        "parameters": [
          {
            "name": "PostableAlerts",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/alertmanager/{DatasourceUID}/api/v2/alerts/groups": {
      "get": {
        "description": "get alertmanager alerts",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAMAlertGroups",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Show active alerts",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show silenced alerts",
            "name": "silenced",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Show inhibited alerts",
            "name": "inhibited",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of matchers to filter alerts by",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A regex matching receivers to filter alerts by",
            "name": "receiver",
            "in": "query"
          },
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "alertGroups",
            "schema": {
              "$ref": "#/definitions/alertGroups"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/alertmanager/{DatasourceUID}/api/v2/silence/{SilenceId}": {
      "get": {
        "description": "get silence",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetSilence",
        "parameters": [
          {
            "type": "string",
            "name": "SilenceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "gettableSilence",
            "schema": {
              "$ref": "#/definitions/gettableSilence"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      },
      "delete": {
        "description": "delete silence",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteDeleteSilence",
        "parameters": [
          {
            "type": "string",
            "name": "SilenceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/alertmanager/{DatasourceUID}/api/v2/silences": {
      "get": {
        "description": "get silences",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetSilences",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "gettableSilences",
            "schema": {
              "$ref": "#/definitions/gettableSilences"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      },
      "post": {
        "description": "create silence",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteCreateSilence",
        "parameters": [
          {
            "name": "Silence",
            "in": "body",
            "schema": {}
          },
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "postSilencesOKBody",
            "schema": {
              "$ref": "#/definitions/postSilencesOKBody"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/alertmanager/{DatasourceUID}/api/v2/status": {
      "get": {
        "description": "get alertmanager status and configuration",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAMStatus",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableStatus",
            "schema": {
              "$ref": "#/definitions/GettableStatus"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/alertmanager/{DatasourceUID}/config/api/v1/alerts": {
      "get": {
        "description": "gets an Alerting config",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteGetAlertingConfig",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GettableUserConfig",
            "schema": {
              "$ref": "#/definitions/GettableUserConfig"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      },
      "post": {
        "description": "sets an Alerting config",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RoutePostAlertingConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          },
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      },
      "delete": {
        "description": "deletes the Alerting config for a tenant",
        "tags": [
          "alertmanager"
        ],
        "operationId": "RouteDeleteAlertingConfig",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/prometheus/grafana/api/v1/alerts": {
      "get": {
        "description": "gets the current alerts",
        "tags": [
          "prometheus"
        ],
        "operationId": "RouteGetGrafanaAlertStatuses",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Include Grafana specific labels as part of the response.",
            "name": "includeInternalLabels",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "schema": {
              "$ref": "#/definitions/AlertResponse"
            }
          }
        }
      }
    },
    "/api/prometheus/grafana/api/v1/rules": {
      "get": {
        "description": "gets the evaluation statuses of all rules",
        "tags": [
          "prometheus"
        ],
        "operationId": "RouteGetGrafanaRuleStatuses",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Include Grafana specific labels as part of the response.",
            "name": "includeInternalLabels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter the list of rules to those that belong to the specified dashboard UID.",
            "name": "DashboardUID",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Filter the list of rules to those that belong to the specified panel ID. Dashboard UID must be specified.",
            "name": "PanelID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "RuleResponse",
            "schema": {
              "$ref": "#/definitions/RuleResponse"
            }
          }
        }
      }
    },
    "/api/prometheus/{DatasourceUID}/api/v1/alerts": {
      "get": {
        "description": "gets the current alerts",
        "tags": [
          "prometheus"
        ],
        "operationId": "RouteGetAlertStatuses",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AlertResponse",
            "schema": {
              "$ref": "#/definitions/AlertResponse"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/prometheus/{DatasourceUID}/api/v1/rules": {
      "get": {
        "description": "gets the evaluation statuses of all rules",
        "tags": [
          "prometheus"
        ],
        "operationId": "RouteGetRuleStatuses",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "RuleResponse",
            "schema": {
              "$ref": "#/definitions/RuleResponse"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/ruler/grafana/api/v1/rules": {
      "get": {
        "description": "List rule groups",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RouteGetGrafanaRulesConfig",
        "parameters": [
          {
            "type": "string",
            "name": "DashboardUID",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "PanelID",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "NamespaceConfigResponse",
            "schema": {
              "$ref": "#/definitions/NamespaceConfigResponse"
            }
          }
        }
      }
    },
    "/api/ruler/grafana/api/v1/rules/{Namespace}": {
      "get": {
        "description": "Get rule groups by namespace",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RouteGetNamespaceGrafanaRulesConfig",
        "parameters": [
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "NamespaceConfigResponse",
            "schema": {
              "$ref": "#/definitions/NamespaceConfigResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates or updates a rule group",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RoutePostNameGrafanaRulesConfig",
        "parameters": [
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      },
      "delete": {
        "description": "Delete namespace",
        "tags": [
          "ruler"
        ],
        "operationId": "RouteDeleteNamespaceGrafanaRulesConfig",
        "parameters": [
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      }
    },
    "/api/ruler/grafana/api/v1/rules/{Namespace}/{Groupname}": {
      "get": {
        "description": "Get rule group",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RouteGetGrafanaRuleGroupConfig",
        "parameters": [
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Groupname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "RuleGroupConfigResponse",
            "schema": {
              "$ref": "#/definitions/RuleGroupConfigResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete rule group",
        "tags": [
          "ruler"
        ],
        "operationId": "RouteDeleteGrafanaRuleGroupConfig",
        "parameters": [
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Groupname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      }
    },
    "/api/ruler/{DatasourceUID}/api/v1/rules": {
      "get": {
        "description": "List rule groups",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RouteGetRulesConfig",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "DashboardUID",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "PanelID",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "NamespaceConfigResponse",
            "schema": {
              "$ref": "#/definitions/NamespaceConfigResponse"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/ruler/{DatasourceUID}/api/v1/rules/{Namespace}": {
      "get": {
        "description": "Get rule groups by namespace",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RouteGetNamespaceRulesConfig",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "NamespaceConfigResponse",
            "schema": {
              "$ref": "#/definitions/NamespaceConfigResponse"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      },
      "post": {
        "description": "Creates or updates a rule group",
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RoutePostNameRulesConfig",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      },
      "delete": {
        "description": "Delete namespace",
        "tags": [
          "ruler"
        ],
        "operationId": "RouteDeleteNamespaceRulesConfig",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/ruler/{DatasourceUID}/api/v1/rules/{Namespace}/{Groupname}": {
      "get": {
        "description": "Get rule group",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ruler"
        ],
        "operationId": "RouteGetRulegGroupConfig",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Groupname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "RuleGroupConfigResponse",
            "schema": {
              "$ref": "#/definitions/RuleGroupConfigResponse"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      },
      "delete": {
        "description": "Delete rule group",
        "tags": [
          "ruler"
        ],
        "operationId": "RouteDeleteRuleGroupConfig",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Groupname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/v1/eval": {
      "post": {
        "description": "Test rule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "testing"
        ],
        "operationId": "RouteEvalQueries",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "EvalQueriesResponse",
            "schema": {
              "$ref": "#/definitions/EvalQueriesResponse"
            }
          }
        }
      }
    },
    "/api/v1/ngalert": {
      "get": {
        "description": "Get the status of the alerting engine",
        "produces": [
          "application/json"
        ],
        "tags": [
          "configuration"
        ],
        "operationId": "RouteGetStatus",
        "responses": {
          "200": {
            "description": "AlertingStatus",
            "schema": {
              "$ref": "#/definitions/AlertingStatus"
            }
          }
        }
      }
    },
    "/api/v1/ngalert/admin_config": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "configuration"
        ],
        "summary": "Get the NGalert configuration of the user's organization, returns 404 if no configuration is present.",
        "operationId": "RouteGetNGalertConfig",
        "responses": {
          "200": {
            "description": "GettableNGalertConfig",
            "schema": {
              "$ref": "#/definitions/GettableNGalertConfig"
            }
          },
          "404": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "configuration"
        ],
        "summary": "Creates or updates the NGalert configuration of the user's organization. If no value is sent for alertmanagersChoice, it defaults to \"all\".",
        "operationId": "RoutePostNGalertConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "configuration"
        ],
        "summary": "Deletes the NGalert configuration of the user's organization.",
        "operationId": "RouteDeleteNGalertConfig",
        "responses": {
          "200": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "500": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          }
        }
      }
    },
    "/api/v1/ngalert/alertmanagers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "configuration"
        ],
        "summary": "Get the discovered and dropped Alertmanagers of the user's organization based on the specified configuration.",
        "operationId": "RouteGetAlertmanagers",
        "responses": {
          "200": {
            "description": "GettableAlertmanagers",
            "schema": {
              "$ref": "#/definitions/GettableAlertmanagers"
            }
          }
        }
      }
    },
    "/api/v1/provisioning/alert-rules": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Get all the alert rules.",
        "operationId": "RouteGetAlertRules",
        "responses": {
          "200": {
            "description": "ProvisionedAlertRules",
            "schema": {
              "$ref": "#/definitions/ProvisionedAlertRules"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Create a new alert rule.",
        "operationId": "RoutePostAlertRule",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          },
          {
            "type": "string",
            "name": "X-Disable-Provenance",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/ProvisionedAlertRule"
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/v1/provisioning/alert-rules/export": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Export all alert rules in provisioning file format.",
        "operationId": "RouteGetAlertRulesExport",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Whether to initiate a download of the file or not.",
            "name": "download",
            "in": "query"
          },
          {
            "type": "string",
            "default": "yaml",
            "description": "Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.",
            "name": "format",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AlertingFileExport",
            "schema": {
              "$ref": "#/definitions/AlertingFileExport"
            }
          },
          "404": {
            "description": " Not found."
          }
        }
      }
    },
    "/api/v1/provisioning/alert-rules/{UID}": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Get a specific alert rule by UID.",
        "operationId": "RouteGetAlertRule",
        "parameters": [
          {
            "type": "string",
            "description": "Alert rule UID",
            "name": "UID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProvisionedAlertRule"
          },
          "404": {
            "description": " Not found."
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Update an existing alert rule.",
        "operationId": "RoutePutAlertRule",
        "parameters": [
          {
            "type": "string",
            "description": "Alert rule UID",
            "name": "UID",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          },
          {
            "type": "string",
            "name": "X-Disable-Provenance",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ProvisionedAlertRule"
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Delete a specific alert rule by UID.",
        "operationId": "RouteDeleteAlertRule",
        "parameters": [
          {
            "type": "string",
            "description": "Alert rule UID",
            "name": "UID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " The alert rule was deleted successfully."
          }
        }
      }
    },
    "/api/v1/provisioning/alert-rules/{UID}/export": {
      "get": {
        "produces": [
          "application/json",
          "application/yaml",
          "text/yaml"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Export an alert rule in provisioning file format.",
        "operationId": "RouteGetAlertRuleExport",
        "parameters": [
          {
            "type": "string",
            "description": "Alert rule UID",
            "name": "UID",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether to initiate a download of the file or not.",
            "name": "download",
            "in": "query"
          },
          {
            "type": "string",
            "default": "yaml",
            "description": "Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.",
            "name": "format",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AlertingFileExport",
            "schema": {
              "$ref": "#/definitions/AlertingFileExport"
            }
          },
          "404": {
            "description": " Not found."
          }
        }
      }
    },
    "/api/v1/provisioning/contact-points": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Get all the contact points.",
        "operationId": "RouteGetContactpoints",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by name",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ContactPoints",
            "schema": {
              "$ref": "#/definitions/ContactPoints"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Create a contact point.",
        "operationId": "RoutePostContactpoints",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "202": {
            "description": "EmbeddedContactPoint",
            "schema": {
              "$ref": "#/definitions/EmbeddedContactPoint"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/v1/provisioning/contact-points/{UID}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Update an existing contact point.",
        "operationId": "RoutePutContactpoint",
        "parameters": [
          {
            "type": "string",
            "description": "UID is the contact point unique identifier",
            "name": "UID",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Delete a contact point.",
        "operationId": "RouteDeleteContactpoints",
        "parameters": [
          {
            "type": "string",
            "description": "UID is the contact point unique identifier",
            "name": "UID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " The contact point was deleted successfully."
          }
        }
      }
    },
    "/api/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Get a rule group.",
        "operationId": "RouteGetAlertRuleGroup",
        "parameters": [
          {
            "type": "string",
            "name": "FolderUID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Group",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "AlertRuleGroup",
            "schema": {
              "$ref": "#/definitions/AlertRuleGroup"
            }
          },
          "404": {
            "description": " Not found."
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Update the interval of a rule group.",
        "operationId": "RoutePutAlertRuleGroup",
        "parameters": [
          {
            "type": "string",
            "name": "FolderUID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Group",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "AlertRuleGroup",
            "schema": {
              "$ref": "#/definitions/AlertRuleGroup"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}/export": {
      "get": {
        "produces": [
          "application/json",
          "application/yaml",
          "text/yaml"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Export an alert rule group in provisioning file format.",
        "operationId": "RouteGetAlertRuleGroupExport",
        "parameters": [
          {
            "type": "string",
            "name": "FolderUID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "Group",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether to initiate a download of the file or not.",
            "name": "download",
            "in": "query"
          },
          {
            "type": "string",
            "default": "yaml",
            "description": "Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.",
            "name": "format",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "AlertingFileExport",
            "schema": {
              "$ref": "#/definitions/AlertingFileExport"
            }
          },
          "404": {
            "description": " Not found."
          }
        }
      }
    },
    "/api/v1/provisioning/mute-timings": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Get all the mute timings.",
        "operationId": "RouteGetMuteTimings",
        "responses": {
          "200": {
            "description": "MuteTimings",
            "schema": {
              "$ref": "#/definitions/MuteTimings"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Create a new mute timing.",
        "operationId": "RoutePostMuteTiming",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "MuteTimeInterval",
            "schema": {
              "$ref": "#/definitions/MuteTimeInterval"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      }
    },
    "/api/v1/provisioning/mute-timings/{name}": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Get a mute timing.",
        "operationId": "RouteGetMuteTiming",
        "parameters": [
          {
            "type": "string",
            "description": "Mute timing name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "MuteTimeInterval",
            "schema": {
              "$ref": "#/definitions/MuteTimeInterval"
            }
          },
          "404": {
            "description": " Not found."
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Replace an existing mute timing.",
        "operationId": "RoutePutMuteTiming",
        "parameters": [
          {
            "type": "string",
            "description": "Mute timing name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "MuteTimeInterval",
            "schema": {
              "$ref": "#/definitions/MuteTimeInterval"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Delete a mute timing.",
        "operationId": "RouteDeleteMuteTiming",
        "parameters": [
          {
            "type": "string",
            "description": "Mute timing name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " The mute timing was deleted successfully."
          }
        }
      }
    },
    "/api/v1/provisioning/policies": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Get the notification policy tree.",
        "operationId": "RouteGetPolicyTree",
        "responses": {
          "200": {
            "$ref": "#/responses/Route"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Sets the notification policy tree.",
        "operationId": "RoutePutPolicyTree",
        "parameters": [
          {
            "description": "The new notification routing tree to use",
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Clears the notification policy tree.",
        "operationId": "RouteResetPolicyTree",
        "responses": {
          "202": {
            "description": "Ack",
            "schema": {
              "$ref": "#/definitions/Ack"
            }
          }
        }
      }
    },
    "/api/v1/provisioning/templates": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Get all notification templates.",
        "operationId": "RouteGetTemplates",
        "responses": {
          "200": {
            "description": "NotificationTemplates",
            "schema": {
              "$ref": "#/definitions/NotificationTemplates"
            }
          },
          "404": {
            "description": " Not found."
          }
        }
      }
    },
    "/api/v1/provisioning/templates/{name}": {
      "get": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Get a notification template.",
        "operationId": "RouteGetTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Template Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "NotificationTemplate",
            "schema": {
              "$ref": "#/definitions/NotificationTemplate"
            }
          },
          "404": {
            "description": " Not found."
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Updates an existing notification template.",
        "operationId": "RoutePutTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Template Name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "202": {
            "description": "NotificationTemplate",
            "schema": {
              "$ref": "#/definitions/NotificationTemplate"
            }
          },
          "400": {
            "description": "ValidationError",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "provisioning",
          "stable"
        ],
        "summary": "Delete a template.",
        "operationId": "RouteDeleteTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "Template Name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " The template was deleted successfully."
          }
        }
      }
    },
    "/api/v1/rule/backtest": {
      "post": {
        "description": "Test rule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "testing"
        ],
        "operationId": "BacktestConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "BacktestResult",
            "schema": {
              "$ref": "#/definitions/BacktestResult"
            }
          }
        }
      }
    },
    "/api/v1/rule/test/grafana": {
      "post": {
        "description": "Test a rule against Grafana ruler",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "testing"
        ],
        "operationId": "RouteTestRuleGrafanaConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "TestRuleResponse",
            "schema": {
              "$ref": "#/definitions/TestRuleResponse"
            }
          }
        }
      }
    },
    "/api/v1/rule/test/{DatasourceUID}": {
      "post": {
        "description": "Test a rule against external data source ruler",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "testing"
        ],
        "operationId": "RouteTestRuleConfig",
        "parameters": [
          {
            "type": "string",
            "description": "DatasoureUID should be the datasource UID identifier",
            "name": "DatasourceUID",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "TestRuleResponse",
            "schema": {
              "$ref": "#/definitions/TestRuleResponse"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      }
    },
    "/api/v1/rules/history": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "history"
        ],
        "summary": "Query state history.",
        "operationId": "RouteGetStateHistory",
        "responses": {
          "200": {
            "$ref": "#/responses/StateHistory"
          }
        }
      }
    },
    "/receivers": {
      "get": {
        "description": "Get list of all receivers (name of notification integrations)",
        "tags": [
          "receiver"
        ],
        "operationId": "getReceivers"
      }
    },
    "/silence/{silenceID}": {
      "get": {
        "description": "Get a silence by its ID",
        "tags": [
          "silence"
        ],
        "operationId": "getSilence",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the silence to get",
            "name": "SilenceID",
            "in": "path",
            "required": true
          }
        ]
      },
      "delete": {
        "description": "Delete a silence by its ID",
        "tags": [
          "silence"
        ],
        "operationId": "deleteSilence",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the silence to get",
            "name": "SilenceID",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/silences": {
      "get": {
        "description": "Get a list of silences",
        "tags": [
          "silence"
        ],
        "operationId": "getSilences",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "A list of matchers to filter silences by",
            "name": "Filter",
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Post a new silence or update an existing one",
        "tags": [
          "silence"
        ],
        "operationId": "postSilences",
        "parameters": [
          {
            "description": "The silence to create",
            "name": "Silence",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ]
      }
    },
    "/status": {
      "get": {
        "description": "Get current status of an Alertmanager instance and its cluster",
        "tags": [
          "general"
        ],
        "operationId": "getStatus"
      }
    }
  },
  "definitions": {
    "Ack": {},
    "Alert": {
      "title": "Alert has info for an alert."
    },
    "AlertDiscovery": {
      "title": "AlertDiscovery has info for all active alerts."
    },
    "AlertInstancesResponse": {},
    "AlertManagerNotReady": {},
    "AlertResponse": {},
    "AlertRuleGroup": {},
    "AlertRuleGroupMetadata": {},
    "AlertingFileExport": {
      "title": "AlertingFileExport is the full provisioned file export."
    },
    "AlertingRule": {
      "description": "adapted from cortex"
    },
    "AlertingStatus": {},
    "BacktestConfig": {},
    "BacktestResult": {},
    "ContactPoints": {},
    "DataResponse": {
      "description": "A map of RefIDs (unique query identifiers) to this type makes up the Responses property of a QueryDataResponse.\nThe Error property is used to allow for partial success responses from the containing QueryDataResponse.",
      "title": "DataResponse contains the results from a DataQuery."
    },
    "DiscoveryBase": {},
    "EmbeddedContactPoint": {
      "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
    },
    "EvalQueriesPayload": {},
    "EvalQueriesResponse": {},
    "ExtendedReceiver": {},
    "Failure": {},
    "Field": {
      "description": "A Field is essentially a slice of various types with extra properties and methods.\nSee NewField() for supported types.\n\nThe slice data in the Field is a not exported, so methods on the Field are used to to manipulate its data.",
      "title": "Field represents a typed column of data within a Frame."
    },
    "Frame": {
      "description": "Each Field is well typed by its FieldType and supports optional Labels.\n\nA Frame is a general data container for Grafana. A Frame can be table data\nor time series data depending on its content and field types.",
      "title": "Frame is a columnar data structure where each column is a Field."
    },
    "FrameLabels": {
      "description": "Labels are used to add metadata to an object.  The JSON will always be sorted keys"
    },
    "FrameMeta": {
      "description": "https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11\nNOTE -- in javascript this can accept any `[key: string]: any;` however\nthis interface only exposes the values we want to be exposed",
      "title": "FrameMeta matches:"
    },
    "Frames": {
      "description": "It is the main data container within a backend.DataResponse.\nThere should be no `nil` entries in the Frames slice (making them pointers was a mistake).",
      "title": "Frames is a slice of Frame pointers."
    },
    "GettableAlertmanagers": {},
    "GettableGrafanaRule": {},
    "GettableNGalertConfig": {},
    "GettableRuleGroupConfig": {},
    "GettableStatus": {},
    "GettableUserConfig": {},
    "MultiStatus": {},
    "MuteTimeInterval": {},
    "MuteTimings": {},
    "NamespaceConfigResponse": {},
    "NotFound": {},
    "NotificationTemplate": {},
    "NotificationTemplates": {},
    "PermissionDenied": {},
    "PostSilencesOKBody": {
      "description": "PostSilencesOKBody post silences o k body"
    },
    "PostableGrafanaRule": {},
    "PostableNGalertConfig": {},
    "PostableRuleGroupConfig": {},
    "PostableUserConfig": {},
    "ProvisionedAlertRules": {},
    "ResponseDetails": {},
    "Responses": {
      "description": "The QueryData method the QueryDataHandler method will set the RefId\nproperty on the DataResponses' frames based on these RefIDs.",
      "title": "Responses is a map of RefIDs (Unique Query ID) to DataResponses."
    },
    "Rule": {
      "description": "adapted from cortex"
    },
    "RuleDiscovery": {},
    "RuleGroup": {},
    "RuleGroupConfigResponse": {},
    "RuleResponse": {},
    "SmtpNotEnabled": {},
    "Success": {},
    "TestReceiverConfigResult": {},
    "TestReceiverResult": {},
    "TestReceiversResult": {},
    "TestRulePayload": {},
    "TestRuleResponse": {},
    "ValidationError": {},
    "alert": {
      "description": "Alert alert"
    },
    "alertGroup": {},
    "alertGroups": {},
    "alertStatus": {
      "description": "AlertStatus alert status"
    },
    "alertmanagerConfig": {
      "description": "AlertmanagerConfig alertmanager config"
    },
    "alertmanagerStatus": {
      "description": "AlertmanagerStatus alertmanager status"
    },
    "clusterStatus": {
      "description": "ClusterStatus cluster status"
    },
    "gettableAlert": {},
    "gettableAlerts": {
      "description": "GettableAlerts gettable alerts"
    },
    "gettableSilence": {},
    "gettableSilences": {
      "description": "GettableSilences gettable silences"
    },
    "integration": {
      "description": "Integration integration"
    },
    "labelSet": {
      "description": "LabelSet label set"
    },
    "matcher": {
      "description": "Matcher matcher"
    },
    "matchers": {
      "description": "Matchers matchers"
    },
    "peerStatus": {
      "description": "PeerStatus peer status"
    },
    "postSilencesOKBody": {},
    "postableAlert": {
      "description": "PostableAlert postable alert"
    },
    "postableAlerts": {
      "description": "PostableAlerts postable alerts"
    },
    "postableSilence": {},
    "receiver": {},
    "silence": {
      "description": "Silence silence"
    },
    "silenceStatus": {
      "description": "SilenceStatus silence status"
    },
    "versionInfo": {
      "description": "VersionInfo version info"
    }
  },
  "responses": {
    "StateHistory": {
      "description": "",
      "headers": {
        "results": {}
      }
    },
    "deleteSilenceInternalServerError": {
      "description": "DeleteSilenceInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "deleteSilenceOK": {
      "description": "DeleteSilenceOK Delete silence response"
    },
    "getAlertGroupsBadRequest": {
      "description": "GetAlertGroupsBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertGroupsInternalServerError": {
      "description": "GetAlertGroupsInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertGroupsOK": {
      "description": "GetAlertGroupsOK Get alert groups response",
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getAlertsBadRequest": {
      "description": "GetAlertsBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertsInternalServerError": {
      "description": "GetAlertsInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getAlertsOK": {
      "description": "GetAlertsOK Get alerts response",
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getReceiversOK": {
      "description": "GetReceiversOK Get receivers response",
      "headers": {
        "body": {
          "type": "array",
          "items": {},
          "description": "In: Body"
        }
      }
    },
    "getSilenceInternalServerError": {
      "description": "GetSilenceInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getSilenceNotFound": {
      "description": "GetSilenceNotFound A silence with the specified ID was not found"
    },
    "getSilenceOK": {
      "description": "GetSilenceOK Get silence response",
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getSilencesInternalServerError": {
      "description": "GetSilencesInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "getSilencesOK": {
      "description": "GetSilencesOK Get silences response",
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "getStatusOK": {
      "description": "GetStatusOK Get status response",
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "postAlertsBadRequest": {
      "description": "PostAlertsBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postAlertsInternalServerError": {
      "description": "PostAlertsInternalServerError Internal server error",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postAlertsOK": {
      "description": "PostAlertsOK Create alerts response"
    },
    "postSilencesBadRequest": {
      "description": "PostSilencesBadRequest Bad request",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postSilencesNotFound": {
      "description": "PostSilencesNotFound A silence with the specified ID was not found",
      "headers": {
        "body": {
          "type": "string",
          "description": "In: Body"
        }
      }
    },
    "postSilencesOK": {
      "description": "PostSilencesOK Create / update silence response",
      "headers": {
        "body": {
          "description": "In: Body"
        }
      }
    },
    "receiversResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  }
}