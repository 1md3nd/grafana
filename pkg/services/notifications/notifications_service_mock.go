// Code generated by mockery v2.14.0. DO NOT EDIT.

package notifications

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FakeNotificationService is an autogenerated mock type for the Service type
type FakeNotificationService struct {
	mock.Mock
}

// SendEmailCommandHandler provides a mock function with given fields: ctx, cmd
func (_m *FakeNotificationService) SendEmailCommandHandler(ctx context.Context, cmd *SendEmailCommand) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *SendEmailCommand) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmailCommandHandlerSync provides a mock function with given fields: ctx, cmd
func (_m *FakeNotificationService) SendEmailCommandHandlerSync(ctx context.Context, cmd *SendEmailCommandSync) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *SendEmailCommandSync) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendWebhookSync provides a mock function with given fields: ctx, cmd
func (_m *FakeNotificationService) SendWebhookSync(ctx context.Context, cmd *SendWebhookSync) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *SendWebhookSync) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFakeNotificationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewFakeNotificationService creates a new instance of FakeNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeNotificationService(t mockConstructorTestingTNewFakeNotificationService) *FakeNotificationService {
	mock := &FakeNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
