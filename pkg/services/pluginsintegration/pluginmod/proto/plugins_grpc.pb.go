// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plugins

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginManagerClient is the client API for PluginManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginManagerClient interface {
	GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error)
	GetPlugins(ctx context.Context, in *GetPluginsRequest, opts ...grpc.CallOption) (*GetPluginsResponse, error)
	AddPlugin(ctx context.Context, in *AddPluginRequest, opts ...grpc.CallOption) (*AddPluginResponse, error)
	RemovePlugin(ctx context.Context, in *RemovePluginRequest, opts ...grpc.CallOption) (*RemovePluginResponse, error)
	File(ctx context.Context, in *GetPluginFileRequest, opts ...grpc.CallOption) (*GetPluginFileResponse, error)
	PluginErrors(ctx context.Context, in *GetPluginErrorsRequest, opts ...grpc.CallOption) (*GetPluginErrorsResponse, error)
	StaticRoute(ctx context.Context, in *GetStaticRoutesRequest, opts ...grpc.CallOption) (*GetStaticRoutesResponse, error)
}

type pluginManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginManagerClient(cc grpc.ClientConnInterface) PluginManagerClient {
	return &pluginManagerClient{cc}
}

func (c *pluginManagerClient) GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error) {
	out := new(GetPluginResponse)
	err := c.cc.Invoke(ctx, "/plugins.PluginManager/GetPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerClient) GetPlugins(ctx context.Context, in *GetPluginsRequest, opts ...grpc.CallOption) (*GetPluginsResponse, error) {
	out := new(GetPluginsResponse)
	err := c.cc.Invoke(ctx, "/plugins.PluginManager/GetPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerClient) AddPlugin(ctx context.Context, in *AddPluginRequest, opts ...grpc.CallOption) (*AddPluginResponse, error) {
	out := new(AddPluginResponse)
	err := c.cc.Invoke(ctx, "/plugins.PluginManager/AddPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerClient) RemovePlugin(ctx context.Context, in *RemovePluginRequest, opts ...grpc.CallOption) (*RemovePluginResponse, error) {
	out := new(RemovePluginResponse)
	err := c.cc.Invoke(ctx, "/plugins.PluginManager/RemovePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerClient) File(ctx context.Context, in *GetPluginFileRequest, opts ...grpc.CallOption) (*GetPluginFileResponse, error) {
	out := new(GetPluginFileResponse)
	err := c.cc.Invoke(ctx, "/plugins.PluginManager/File", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerClient) PluginErrors(ctx context.Context, in *GetPluginErrorsRequest, opts ...grpc.CallOption) (*GetPluginErrorsResponse, error) {
	out := new(GetPluginErrorsResponse)
	err := c.cc.Invoke(ctx, "/plugins.PluginManager/PluginErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerClient) StaticRoute(ctx context.Context, in *GetStaticRoutesRequest, opts ...grpc.CallOption) (*GetStaticRoutesResponse, error) {
	out := new(GetStaticRoutesResponse)
	err := c.cc.Invoke(ctx, "/plugins.PluginManager/StaticRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginManagerServer is the server API for PluginManager service.
// All implementations should embed UnimplementedPluginManagerServer
// for forward compatibility
type PluginManagerServer interface {
	GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error)
	GetPlugins(context.Context, *GetPluginsRequest) (*GetPluginsResponse, error)
	AddPlugin(context.Context, *AddPluginRequest) (*AddPluginResponse, error)
	RemovePlugin(context.Context, *RemovePluginRequest) (*RemovePluginResponse, error)
	File(context.Context, *GetPluginFileRequest) (*GetPluginFileResponse, error)
	PluginErrors(context.Context, *GetPluginErrorsRequest) (*GetPluginErrorsResponse, error)
	StaticRoute(context.Context, *GetStaticRoutesRequest) (*GetStaticRoutesResponse, error)
}

// UnimplementedPluginManagerServer should be embedded to have forward compatible implementations.
type UnimplementedPluginManagerServer struct {
}

func (UnimplementedPluginManagerServer) GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugin not implemented")
}
func (UnimplementedPluginManagerServer) GetPlugins(context.Context, *GetPluginsRequest) (*GetPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugins not implemented")
}
func (UnimplementedPluginManagerServer) AddPlugin(context.Context, *AddPluginRequest) (*AddPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlugin not implemented")
}
func (UnimplementedPluginManagerServer) RemovePlugin(context.Context, *RemovePluginRequest) (*RemovePluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlugin not implemented")
}
func (UnimplementedPluginManagerServer) File(context.Context, *GetPluginFileRequest) (*GetPluginFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (UnimplementedPluginManagerServer) PluginErrors(context.Context, *GetPluginErrorsRequest) (*GetPluginErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginErrors not implemented")
}
func (UnimplementedPluginManagerServer) StaticRoute(context.Context, *GetStaticRoutesRequest) (*GetStaticRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaticRoute not implemented")
}

// UnsafePluginManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginManagerServer will
// result in compilation errors.
type UnsafePluginManagerServer interface {
	mustEmbedUnimplementedPluginManagerServer()
}

func RegisterPluginManagerServer(s grpc.ServiceRegistrar, srv PluginManagerServer) {
	s.RegisterService(&PluginManager_ServiceDesc, srv)
}

func _PluginManager_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.PluginManager/GetPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServer).GetPlugin(ctx, req.(*GetPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManager_GetPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServer).GetPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.PluginManager/GetPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServer).GetPlugins(ctx, req.(*GetPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManager_AddPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServer).AddPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.PluginManager/AddPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServer).AddPlugin(ctx, req.(*AddPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManager_RemovePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServer).RemovePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.PluginManager/RemovePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServer).RemovePlugin(ctx, req.(*RemovePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManager_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.PluginManager/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServer).File(ctx, req.(*GetPluginFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManager_PluginErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServer).PluginErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.PluginManager/PluginErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServer).PluginErrors(ctx, req.(*GetPluginErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManager_StaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaticRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServer).StaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.PluginManager/StaticRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServer).StaticRoute(ctx, req.(*GetStaticRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginManager_ServiceDesc is the grpc.ServiceDesc for PluginManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.PluginManager",
	HandlerType: (*PluginManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlugin",
			Handler:    _PluginManager_GetPlugin_Handler,
		},
		{
			MethodName: "GetPlugins",
			Handler:    _PluginManager_GetPlugins_Handler,
		},
		{
			MethodName: "AddPlugin",
			Handler:    _PluginManager_AddPlugin_Handler,
		},
		{
			MethodName: "RemovePlugin",
			Handler:    _PluginManager_RemovePlugin_Handler,
		},
		{
			MethodName: "File",
			Handler:    _PluginManager_File_Handler,
		},
		{
			MethodName: "PluginErrors",
			Handler:    _PluginManager_PluginErrors_Handler,
		},
		{
			MethodName: "StaticRoute",
			Handler:    _PluginManager_StaticRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins.proto",
}
