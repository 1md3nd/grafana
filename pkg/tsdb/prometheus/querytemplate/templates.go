package querytemplate

var QueryTemplateStrings = []string{
	"metric{}",
	"metric{} > 99",
	"metric{}[1m]",
	"metric{} / 99",
	"metric{} == 99",
	"metric{} * 99",
	"rate(metric{}[1m])",
	"rate(metric{}[1m]) * 99",
	"irate(metric{}[1m])",
	"increase(metric{}[1m])",
	"count(metric{})",
	"max(metric{})",
	"avg(metric{})",
	"sum(metric{})",
	"delta(metric{}[1m])",
	"sum(rate(metric{}[1m]))",
	"sum(irate(metric{}[1m]))",
	"sum(increase(metric{}[1m]))",
	"sum(sum_over_time(metric{}[1m]))",
	"sum by() (metric{})",
	"sum by() (metric{}) > 99",
	"sum by() (rate(metric{}[1m]))",
	"sum by() (irate(metric{}[1m]))",
	"sum by() (increase(metric{}[1m]))",
	"sum by() (sum_over_time(metric{}[1m]))",
	"avg by() (metric{})",
	"avg by() (rate(metric{}[1m]))",
	"avg by() (avg_over_time(metric{}[1m]))",
	"sum by() (rate(metric{}[1m])) * 99",
	"max by() (metric{})",
	"count by() (metric{})",
	"sum_over_time(metric{}[1m])",
	"avg_over_time(metric{}[1m])",
	"max_over_time(metric{}[1m])",
	"topk(99,sum by() (rate(metric{}[1m])))",
	"histogram_quantile(99,sum by() (rate(metric{}[1m])))",
}

var CommonTemplateSuggestions = []string{
	"metric{}",
	"rate(metric{}[1m])",
	"increase(metric{}[1m])",
	"count(metric{})",
	"max(metric{})",
	"avg(metric{})",
	"sum(metric{})",
	"sum(rate(metric{}[1m]))",
}
