{
  "version": 1,
  "flamebearer": {
    "names": [
      "total",
      "runtime.morestack",
      "runtime.newstack",
      "runtime.gopreempt_m",
      "runtime.goschedImpl",
      "runtime.schedule",
      "runtime.findRunnable",
      "runtime.checkTimers",
      "runtime.nanotime",
      "runtime.mcall",
      "runtime.park_m",
      "runtime.resetspinning",
      "runtime.wakep",
      "runtime.startm",
      "runtime.notewakeup",
      "runtime.futexwakeup",
      "runtime.futex",
      "runtime.stopm",
      "runtime.mput",
      "runtime.mPark",
      "runtime.notesleep",
      "runtime.futexsleep",
      "runtime.acquirep",
      "runtime.(*mcache).prepareForSweep",
      "runtime.stealWork",
      "runtime.runqsteal",
      "runtime.runqgrab",
      "runtime.usleep",
      "runtime.runtimer",
      "runtime/internal/atomic.(*Uint32).Load",
      "runtime.runOneTimer",
      "time.sendTime",
      "runtime.selectnbsend",
      "runtime.chansend",
      "runtime.full",
      "runtime.pidleget",
      "runtime.(*limiterEvent).stop",
      "runtime.netpollBreak",
      "runtime.write",
      "runtime.write1",
      "runtime.netpoll",
      "runtime/internal/syscall.EpollWait",
      "runtime/internal/syscall.Syscall6",
      "runtime.injectglist",
      "runtime.injectglist.func1",
      "runtime.goexit0",
      "runtime.gcBgMarkWorker",
      "runtime.systemstack",
      "runtime.gcBgMarkWorker.func2",
      "runtime.gcDrain",
      "runtime.scanobject",
      "runtime.heapBits.next",
      "runtime.heapBitsForAddr",
      "runtime.findObject",
      "runtime.(*mspan).base",
      "runtime.markroot",
      "runtime.markroot.func1",
      "runtime.scanstack",
      "runtime.scanframeworker",
      "runtime.(*stkframe).getStackMap",
      "runtime.pcdatavalue",
      "runtime.pcvalue",
      "runtime.funcInfo.entry",
      "runtime.(*moduledata).textAddr",
      "runtime.bgscavenge",
      "runtime.(*scavengerState).run",
      "runtime.(*scavengerState).init.func2",
      "runtime.(*pageAlloc).scavenge",
      "runtime.(*pageAlloc).scavenge.func1",
      "runtime.(*pageAlloc).scavengeOne",
      "runtime.sysUnused",
      "runtime.sysUnusedOS",
      "runtime.madvise",
      "net/http.(*connReader).backgroundRead",
      "net.(*conn).Read",
      "net.(*netFD).Read",
      "internal/poll.(*FD).Read",
      "net/http.(*conn).serve",
      "net/http.serverHandler.ServeHTTP",
      "net/http.HandlerFunc.ServeHTTP",
      "github.com/grafana/pyroscope/pkg/util.glob..func2.1",
      "golang.org/x/net/http2/h2c.h2cHandler.ServeHTTP",
      "github.com/opentracing-contrib/go-stdlib/nethttp.MiddlewareFunc.func5",
      "github.com/grafana/pyroscope/pkg/util.(*Log).Wrap.Log.Wrap.func1",
      "github.com/grafana/dskit/middleware.(*Instrument).Wrap.Instrument.Wrap.func1",
      "github.com/felixge/httpsnoop.CaptureMetricsFn",
      "github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics",
      "github.com/grafana/dskit/middleware.(*Instrument).Wrap.Instrument.Wrap.func1.2",
      "github.com/grafana/pyroscope/pkg/phlare.glob..func1.1",
      "github.com/gorilla/mux.(*Router).ServeHTTP",
      "github.com/grafana/pyroscope/pkg/util/gziphandler.GzipHandlerWithOpts.func1.1",
      "github.com/grafana/pyroscope/pkg/phlare.New.AuthenticateUser.func1.1",
      "github.com/grafana/pyroscope/pkg/querier.(*QueryHandlers).Render",
      "encoding/json.(*Encoder).Encode",
      "github.com/grafana/pyroscope/pkg/util/gziphandler.(*GzipResponseWriter).Write",
      "github.com/grafana/pyroscope/pkg/util/gziphandler.(*GzipResponseWriter).startGzip",
      "compress/gzip.(*Writer).Write",
      "compress/flate.(*Writer).Write",
      "compress/flate.(*compressor).write",
      "compress/flate.(*compressor).deflate",
      "compress/flate.(*compressor).findMatch",
      "compress/flate.matchLen",
      "net/http.(*fileHandler).ServeHTTP",
      "net/http.serveFile",
      "net/http.serveContent",
      "mime.TypeByExtension",
      "sync.(*Once).Do",
      "sync.(*Once).doSlow",
      "mime.initMime",
      "mime.initMimeUnix",
      "mime.loadMimeFile",
      "os.Open",
      "os.OpenFile",
      "os.openFileNolog",
      "os.open",
      "syscall.Open",
      "syscall.openat",
      "syscall.Syscall6",
      "syscall.RawSyscall6",
      "io.CopyN",
      "io.Copy",
      "io.copyBuffer",
      "compress/flate.NewWriter",
      "runtime.newobject",
      "runtime.mallocgc",
      "runtime.(*mcache).allocLarge",
      "runtime.(*mheap).alloc",
      "runtime.(*mheap).alloc.func1",
      "runtime.(*mheap).allocSpan",
      "runtime.(*pageAlloc).alloc",
      "runtime.(*pageAlloc).find",
      "runtime.(*pageAlloc).find.func1",
      "compress/flate.(*compressor).writeBlock",
      "compress/flate.(*huffmanBitWriter).writeBlock",
      "compress/flate.(*huffmanBitWriter).writeTokens",
      "compress/flate.lengthCode",
      "compress/flate.(*huffmanBitWriter).indexTokens",
      "github.com/grafana/pyroscope/pkg/util/gziphandler.(*GzipResponseWriter).Close",
      "compress/gzip.(*Writer).Close",
      "compress/flate.(*Writer).Close",
      "compress/flate.(*compressor).close",
      "golang.org/x/net/http2.(*Server).ServeConn",
      "golang.org/x/net/http2.(*serverConn).serve",
      "runtime.selectgo",
      "runtime.recv",
      "runtime.cputicks",
      "runtime.blockevent",
      "runtime.saveblockevent",
      "runtime.callers",
      "runtime.callers.func1",
      "runtime.tracebackPCs",
      "runtime.newInlineUnwinder",
      "runtime.(*inlineUnwinder).resolveInternal",
      "runtime.pcdatavalue1",
      "runtime.(*unwinder).next",
      "runtime.findfunc",
      "runtime.findmoduledatap",
      "runtime.(*unwinder).initAt",
      "runtime.(*unwinder).resolveInternal",
      "runtime.funcspdelta",
      "golang.org/x/net/http2.(*serverConn).processFrameFromReader",
      "golang.org/x/net/http2.(*serverConn).processFrame",
      "golang.org/x/net/http2.(*serverConn).processResetStream",
      "context.WithCancel.func1",
      "context.(*cancelCtx).cancel",
      "context.removeChild",
      "runtime.mapdelete",
      "golang.org/x/net/http2.(*serverConn).processHeaders",
      "golang.org/x/net/http2.(*serverConn).newWriterAndRequest",
      "runtime.heapBitsSetType",
      "runtime.writeHeapBits.write",
      "golang.org/x/net/http2.(*serverConn).newStream",
      "net/http.(*conn).readRequest",
      "net/http.readRequest",
      "net/textproto.(*Reader).ReadMIMEHeader",
      "net/textproto.readMIMEHeader",
      "net/textproto.(*Reader).readContinuedLineSlice",
      "net/textproto.(*Reader).readLineSlice",
      "bufio.(*Reader).ReadLine",
      "bufio.(*Reader).ReadSlice",
      "bytes.IndexByte",
      "internal/bytealg.IndexByte",
      "internal/singleflight.(*Group).doCall",
      "net.(*Resolver).lookupIPAddr.func1",
      "net.glob..func1",
      "net.(*Resolver).lookupIP",
      "net.(*conf).hostLookupOrder",
      "net.(*conf).lookupOrder",
      "net.getSystemNSS",
      "net.(*nsswitchConfig).tryUpdate",
      "os.Stat",
      "os.statNolog",
      "os.ignoringEINTR",
      "os.statNolog.func1",
      "syscall.Stat",
      "syscall.fstatat",
      "google.golang.org/grpc/internal/transport.newHTTP2Client.func6",
      "google.golang.org/grpc/internal/transport.(*loopyWriter).run",
      "google.golang.org/grpc/internal/transport.(*loopyWriter).handle",
      "google.golang.org/grpc/internal/transport.(*loopyWriter).headerHandler",
      "runtime.deductAssistCredit",
      "runtime.gcAssistAlloc",
      "runtime.gcAssistAlloc.func1",
      "runtime.gcAssistAlloc1",
      "runtime.gcDrainN",
      "runtime.greyobject",
      "runtime.markBits.setMarked",
      "google.golang.org/grpc/internal/transport.(*controlBuffer).get",
      "runtime.acquireSudog",
      "runtime.releasem",
      "google.golang.org/grpc/internal/transport.(*bufWriter).Flush",
      "google.golang.org/grpc/internal/transport.(*bufWriter).flushKeepBuffer",
      "net.(*conn).Write",
      "net.(*netFD).Write",
      "internal/poll.(*FD).Write",
      "internal/poll.ignoringEINTRIO",
      "syscall.Write",
      "syscall.write",
      "syscall.Syscall",
      "google.golang.org/grpc/internal/transport.(*http2Client).reader",
      "golang.org/x/net/http2.(*Framer).ReadFrame",
      "golang.org/x/net/http2.readFrameHeader",
      "io.ReadFull",
      "io.ReadAtLeast",
      "bufio.(*Reader).Read",
      "syscall.Read",
      "syscall.read",
      "golang.org/x/net/http2.(*Framer).readMetaFrame",
      "golang.org/x/net/http2/hpack.(*Decoder).Write",
      "golang.org/x/net/http2/hpack.(*Decoder).parseHeaderFieldRepr",
      "golang.org/x/net/http2/hpack.(*Decoder).parseFieldLiteral",
      "golang.org/x/net/http2/hpack.(*dynamicTable).add",
      "golang.org/x/net/http2/hpack.(*dynamicTable).evict",
      "golang.org/x/net/http2/hpack.(*headerFieldTable).evictOldest",
      "runtime.memclrHasPointers",
      "golang.org/x/sync/errgroup.(*Group).Go.func1",
      "github.com/grafana/pyroscope/pkg/phlaredb/symdb.(*Reader).openParquetFiles.func1",
      "github.com/grafana/pyroscope/pkg/objstore/parquet.(*File).Open",
      "github.com/parquet-go/parquet-go.OpenFile",
      "github.com/grafana/pyroscope/pkg/objstore/parquet.(*optimizedReaderAt).ReadAt",
      "github.com/grafana/pyroscope/pkg/objstore/providers/filesystem.(*FileReaderAt).ReadAt",
      "os.(*File).ReadAt",
      "os.(*File).pread",
      "internal/poll.(*FD).Pread",
      "syscall.Pread",
      "syscall.pread",
      "github.com/grafana/pyroscope/pkg/phlaredb.SelectMatchingProfiles.RecoverPanic.func4",
      "github.com/grafana/pyroscope/pkg/phlaredb.SelectMatchingProfiles.func1",
      "github.com/grafana/pyroscope/pkg/phlaredb.(*singleBlockQuerier).SelectMatchingProfiles",
      "github.com/grafana/pyroscope/pkg/phlaredb/query.(*BinaryJoinIterator).Next",
      "github.com/grafana/pyroscope/pkg/phlaredb/query.(*SyncIterator).Next",
      "github.com/grafana/pyroscope/pkg/phlaredb/query.(*SyncIterator).next",
      "github.com/grafana/pyroscope/pkg/phlaredb/query.(*SyncIterator).setRowGroup",
      "github.com/parquet-go/parquet-go.(*fileColumnChunk).Pages",
      "github.com/parquet-go/parquet-go.(*filePages).init",
      "github.com/parquet-go/parquet-go.getBufioReader",
      "bufio.NewReaderSize",
      "runtime.makeslice",
      "runtime.(*mspan).initHeapBits",
      "runtime.writeHeapBits.flush",
      "github.com/grafana/pyroscope/pkg/phlaredb.(*BlockQuerier).BlockMetas.func2.RecoverPanic.func2",
      "github.com/grafana/pyroscope/pkg/phlaredb.(*BlockQuerier).BlockMetas.func2.1",
      "github.com/grafana/pyroscope/pkg/phlaredb/block.Read",
      "encoding/json.(*Decoder).Decode",
      "encoding/json.(*Decoder).readValue",
      "encoding/json.stateInString",
      "github.com/grafana/pyroscope/pkg/frontend.(*Frontend).SelectMergeStacktraces.func1",
      "github.com/grafana/pyroscope/pkg/model.(*FlameGraphMerger).MergeFlameGraph",
      "github.com/grafana/pyroscope/pkg/model.(*Tree).InsertStack",
      "github.com/grafana/pyroscope/pkg/model.(*node).insert",
      "memeqbody",
      "golang.org/x/net/http2.(*serverConn).writeFrameAsync",
      "golang.org/x/net/http2.flushFrameWriter.writeFrame",
      "golang.org/x/net/http2.(*serverConn).Flush",
      "golang.org/x/net/http2.(*bufferedWriter).Flush",
      "bufio.(*Writer).Flush",
      "golang.org/x/net/http2.(*serverConn).runHandler",
      "net/http.(*ServeMux).ServeHTTP",
      "connectrpc.com/connect.(*Handler).ServeHTTP",
      "runtime.mapaccess1_faststr",
      "connectrpc.com/connect.NewUnaryHandler[go.shape.struct { connectrpc.com/grpchealth/internal/gen/go/connectext/grpc/health/v1.state google.golang.org/protobuf/internal/impl.MessageState; connectrpc.com/grpchealth/internal/gen/go/connectext/grpc/health/v1.sizeCache int32; connectrpc.com/grpchealth/internal/gen/go/connectext/grpc/health/v1.unknownFields []uint8; Service string \"protobuf:\\\"bytes,1,opt,name=service,proto3\\\" json:\\\"service,omitempty\\\"\" },go.shape.struct { connectrpc.com/grpchealth/internal/gen/go/connectext/grpc/health/v1.state google.golang.org/protobuf/internal/impl.MessageState; connectrpc.com/grpchealth/internal/gen/go/connectext/grpc/health/v1.sizeCache int32; connectrpc.com/grpchealth/internal/gen/go/connectext/grpc/health/v1.unknownFields []uint8; Status connectrpc.com/grpchealth/internal/gen/go/connectext/grpc/health/v1.HealthCheckResponse_ServingStatus \"protobuf:\\\"varint,1,opt,name=status,proto3,enum=connectext.grpc.health.v1.HealthCheckResponse_ServingStatus\\\" json:\\\"status,omitempty\\\"\" }].func2",
      "connectrpc.com/connect.(*errorTranslatingHandlerConnCloser).Send",
      "connectrpc.com/connect.(*grpcHandlerConn).Send",
      "connectrpc.com/connect.(*envelopeWriter).Marshal",
      "connectrpc.com/connect.(*envelopeWriter).marshalAppend",
      "connectrpc.com/connect.(*envelopeWriter).Write",
      "connectrpc.com/connect.(*compressionPool).Compress",
      "connectrpc.com/connect.(*compressionPool).putCompressor",
      "compress/gzip.(*Writer).Reset",
      "compress/gzip.(*Writer).init",
      "compress/flate.(*Writer).Reset",
      "compress/flate.(*compressor).reset",
      "connectrpc.com/connect.(*compressionPool).getCompressor",
      "bytes.(*Buffer).WriteTo",
      "runtime.memclrNoHeapPointers",
      "github.com/grafana/pyroscope/pkg/tenant.(*authInterceptor).WrapStreamingHandler.func1",
      "connectrpc.com/connect.NewBidiStreamHandler[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest \"protobuf:\\\"bytes,1,opt,name=request,proto3\\\" json:\\\"request,omitempty\\\"\"; MaxNodes *int64 \"protobuf:\\\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\\\" json:\\\"max_nodes,omitempty\\\"\"; Profiles []bool \"protobuf:\\\"varint,2,rep,packed,name=profiles,proto3\\\" json:\\\"profiles,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets \"protobuf:\\\"bytes,1,opt,name=selectedProfiles,proto3\\\" json:\\\"selectedProfiles,omitempty\\\"\"; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult \"protobuf:\\\"bytes,3,opt,name=result,proto3\\\" json:\\\"result,omitempty\\\"\" }].func1",
      "github.com/grafana/pyroscope/pkg/ingester.(*Ingester).MergeProfilesStacktraces",
      "github.com/grafana/pyroscope/pkg/ingester.(*Ingester).forInstance",
      "github.com/grafana/pyroscope/pkg/ingester.(*Ingester).MergeProfilesStacktraces.func1",
      "github.com/grafana/pyroscope/pkg/phlaredb.(*PhlareDB).MergeProfilesStacktraces",
      "github.com/grafana/pyroscope/pkg/phlaredb.Queriers.MergeProfilesStacktraces",
      "github.com/grafana/pyroscope/pkg/phlaredb.MergeProfilesStacktraces",
      "connectrpc.com/connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest \"protobuf:\\\"bytes,1,opt,name=request,proto3\\\" json:\\\"request,omitempty\\\"\"; MaxNodes *int64 \"protobuf:\\\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\\\" json:\\\"max_nodes,omitempty\\\"\"; Profiles []bool \"protobuf:\\\"varint,2,rep,packed,name=profiles,proto3\\\" json:\\\"profiles,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets \"protobuf:\\\"bytes,1,opt,name=selectedProfiles,proto3\\\" json:\\\"selectedProfiles,omitempty\\\"\"; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult \"protobuf:\\\"bytes,3,opt,name=result,proto3\\\" json:\\\"result,omitempty\\\"\" }]).Send",
      "connectrpc.com/connect.(*connectStreamingHandlerConn).Send",
      "connectrpc.com/connect.NewUnaryHandler[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries \"protobuf:\\\"bytes,1,rep,name=series,proto3\\\" json:\\\"series,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }].func2",
      "github.com/grafana/pyroscope/pkg/tenant.(*authInterceptor).WrapUnary.func1",
      "connectrpc.com/connect.NewUnaryHandler[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries \"protobuf:\\\"bytes,1,rep,name=series,proto3\\\" json:\\\"series,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }].func1",
      "github.com/grafana/pyroscope/pkg/ingester.(*Ingester).Push",
      "github.com/grafana/pyroscope/pkg/ingester.forInstanceUnary[go.shape.*uint8]",
      "github.com/grafana/pyroscope/pkg/ingester.forInstanceUnary[go.shape.*uint8].func1",
      "github.com/grafana/pyroscope/pkg/ingester.(*Ingester).Push.func1",
      "github.com/grafana/pyroscope/pkg/pprof.FromBytes",
      "github.com/grafana/pyroscope/pkg/pprof.RawFromBytes",
      "github.com/klauspost/compress/gzip.(*Reader).WriteTo",
      "github.com/klauspost/compress/flate.(*decompressor).WriteTo",
      "github.com/klauspost/compress/flate.(*decompressor).doStep",
      "github.com/klauspost/compress/flate.(*decompressor).nextBlock",
      "github.com/klauspost/compress/flate.(*decompressor).huffmanBlockDecoder",
      "github.com/klauspost/compress/flate.(*decompressor).huffmanBytesReader",
      "connectrpc.com/connect.(*connectUnaryHandlerConn).Send",
      "connectrpc.com/connect.(*connectUnaryMarshaler).Marshal",
      "connectrpc.com/connect.NewBidiStreamHandler[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType \"protobuf:\\\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\\\" json:\\\"type,omitempty\\\"\"; FrontendAddress string \"protobuf:\\\"bytes,2,opt,name=frontendAddress,proto3\\\" json:\\\"frontendAddress,omitempty\\\"\"; QueryID uint64 \"protobuf:\\\"varint,3,opt,name=queryID,proto3\\\" json:\\\"queryID,omitempty\\\"\"; UserID string \"protobuf:\\\"bytes,4,opt,name=userID,proto3\\\" json:\\\"userID,omitempty\\\"\"; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest \"protobuf:\\\"bytes,5,opt,name=httpRequest,proto3\\\" json:\\\"httpRequest,omitempty\\\"\"; StatsEnabled bool \"protobuf:\\\"varint,6,opt,name=statsEnabled,proto3\\\" json:\\\"statsEnabled,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus \"protobuf:\\\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\\\" json:\\\"status,omitempty\\\"\"; Error string \"protobuf:\\\"bytes,2,opt,name=error,proto3\\\" json:\\\"error,omitempty\\\"\" }].func1",
      "github.com/grafana/pyroscope/pkg/scheduler.(*Scheduler).FrontendLoop",
      "github.com/grafana/pyroscope/pkg/scheduler.(*Scheduler).frontendConnected",
      "connectrpc.com/connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType \"protobuf:\\\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\\\" json:\\\"type,omitempty\\\"\"; FrontendAddress string \"protobuf:\\\"bytes,2,opt,name=frontendAddress,proto3\\\" json:\\\"frontendAddress,omitempty\\\"\"; QueryID uint64 \"protobuf:\\\"varint,3,opt,name=queryID,proto3\\\" json:\\\"queryID,omitempty\\\"\"; UserID string \"protobuf:\\\"bytes,4,opt,name=userID,proto3\\\" json:\\\"userID,omitempty\\\"\"; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest \"protobuf:\\\"bytes,5,opt,name=httpRequest,proto3\\\" json:\\\"httpRequest,omitempty\\\"\"; StatsEnabled bool \"protobuf:\\\"varint,6,opt,name=statsEnabled,proto3\\\" json:\\\"statsEnabled,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus \"protobuf:\\\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\\\" json:\\\"status,omitempty\\\"\"; Error string \"protobuf:\\\"bytes,2,opt,name=error,proto3\\\" json:\\\"error,omitempty\\\"\" }]).Receive",
      "connectrpc.com/connect.(*errorTranslatingHandlerConnCloser).Receive",
      "connectrpc.com/connect.(*grpcHandlerConn).Receive",
      "connectrpc.com/connect.(*grpcUnmarshaler).Unmarshal",
      "connectrpc.com/connect.(*envelopeReader).Unmarshal",
      "connectrpc.com/connect.(*envelopeReader).Read",
      "bytes.(*Buffer).ReadFrom",
      "io.(*LimitedReader).Read",
      "github.com/grafana/dskit/middleware.(*reqBody).Read",
      "golang.org/x/net/http2.(*requestBody).Read",
      "golang.org/x/net/http2.(*serverConn).noteBodyReadFromHandler",
      "connectrpc.com/connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType \"protobuf:\\\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\\\" json:\\\"type,omitempty\\\"\"; FrontendAddress string \"protobuf:\\\"bytes,2,opt,name=frontendAddress,proto3\\\" json:\\\"frontendAddress,omitempty\\\"\"; QueryID uint64 \"protobuf:\\\"varint,3,opt,name=queryID,proto3\\\" json:\\\"queryID,omitempty\\\"\"; UserID string \"protobuf:\\\"bytes,4,opt,name=userID,proto3\\\" json:\\\"userID,omitempty\\\"\"; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest \"protobuf:\\\"bytes,5,opt,name=httpRequest,proto3\\\" json:\\\"httpRequest,omitempty\\\"\"; StatsEnabled bool \"protobuf:\\\"varint,6,opt,name=statsEnabled,proto3\\\" json:\\\"statsEnabled,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus \"protobuf:\\\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\\\" json:\\\"status,omitempty\\\"\"; Error string \"protobuf:\\\"bytes,2,opt,name=error,proto3\\\" json:\\\"error,omitempty\\\"\" }]).Send",
      "connectrpc.com/connect.flushResponseWriter",
      "github.com/felixge/httpsnoop.(*rw).Flush",
      "golang.org/x/net/http2.(*responseWriter).Flush",
      "golang.org/x/net/http2.(*responseWriter).FlushError",
      "golang.org/x/net/http2.chunkWriter.Write",
      "golang.org/x/net/http2.(*responseWriterState).writeChunk",
      "golang.org/x/net/http2.(*serverConn).writeHeaders",
      "connectrpc.com/connect.(*bufferPool).Get",
      "sync.(*Pool).Get",
      "sync.(*Pool).getSlow",
      "sync.(*poolChain).popTail",
      "sync.(*poolDequeue).popTail",
      "connectrpc.com/connect.NewBidiStreamHandler[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string \"protobuf:\\\"bytes,1,opt,name=querierID,proto3\\\" json:\\\"querierID,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 \"protobuf:\\\"varint,1,opt,name=queryID,proto3\\\" json:\\\"queryID,omitempty\\\"\"; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest \"protobuf:\\\"bytes,2,opt,name=httpRequest,proto3\\\" json:\\\"httpRequest,omitempty\\\"\"; FrontendAddress string \"protobuf:\\\"bytes,3,opt,name=frontendAddress,proto3\\\" json:\\\"frontendAddress,omitempty\\\"\"; UserID string \"protobuf:\\\"bytes,4,opt,name=userID,proto3\\\" json:\\\"userID,omitempty\\\"\"; StatsEnabled bool \"protobuf:\\\"varint,5,opt,name=statsEnabled,proto3\\\" json:\\\"statsEnabled,omitempty\\\"\" }].func1",
      "github.com/grafana/pyroscope/pkg/scheduler.(*Scheduler).QuerierLoop",
      "github.com/grafana/pyroscope/pkg/scheduler/queue.(*RequestQueue).GetNextRequestForQuerier",
      "github.com/grafana/pyroscope/pkg/scheduler/queue.contextCond.Wait",
      "runtime.makechan",
      "runtime.(*mcache).nextFree",
      "runtime.(*mcache).refill",
      "runtime.(*consistentHeapStats).release",
      "github.com/grafana/pyroscope/pkg/scheduler.(*BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string \"protobuf:\\\"bytes,1,opt,name=querierID,proto3\\\" json:\\\"querierID,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 \"protobuf:\\\"varint,1,opt,name=queryID,proto3\\\" json:\\\"queryID,omitempty\\\"\"; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest \"protobuf:\\\"bytes,2,opt,name=httpRequest,proto3\\\" json:\\\"httpRequest,omitempty\\\"\"; FrontendAddress string \"protobuf:\\\"bytes,3,opt,name=frontendAddress,proto3\\\" json:\\\"frontendAddress,omitempty\\\"\"; UserID string \"protobuf:\\\"bytes,4,opt,name=userID,proto3\\\" json:\\\"userID,omitempty\\\"\"; StatsEnabled bool \"protobuf:\\\"varint,5,opt,name=statsEnabled,proto3\\\" json:\\\"statsEnabled,omitempty\\\"\" }]).Receive",
      "connectrpc.com/connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string \"protobuf:\\\"bytes,1,opt,name=querierID,proto3\\\" json:\\\"querierID,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 \"protobuf:\\\"varint,1,opt,name=queryID,proto3\\\" json:\\\"queryID,omitempty\\\"\"; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest \"protobuf:\\\"bytes,2,opt,name=httpRequest,proto3\\\" json:\\\"httpRequest,omitempty\\\"\"; FrontendAddress string \"protobuf:\\\"bytes,3,opt,name=frontendAddress,proto3\\\" json:\\\"frontendAddress,omitempty\\\"\"; UserID string \"protobuf:\\\"bytes,4,opt,name=userID,proto3\\\" json:\\\"userID,omitempty\\\"\"; StatsEnabled bool \"protobuf:\\\"varint,5,opt,name=statsEnabled,proto3\\\" json:\\\"statsEnabled,omitempty\\\"\" }]).Receive",
      "connectrpc.com/connect.(*errorTranslatingHandlerConnCloser).Close",
      "connectrpc.com/connect.(*connectStreamingHandlerConn).Close",
      "connectrpc.com/connect.(*connectStreamingMarshaler).MarshalEndStream",
      "github.com/felixge/httpsnoop.Wrap",
      "runtime.copystack",
      "runtime.duffzero",
      "github.com/uber/jaeger-client-go.(*Tracer).StartSpan",
      "github.com/uber/jaeger-client-go.(*Tracer).startSpanWithOptions",
      "github.com/uber/jaeger-client-go.(*Tracer).newSpan",
      "github.com/uber/jaeger-client-go.simpleSpanAllocator.Get",
      "github.com/uber/jaeger-client-go.(*RemotelyControlledSampler).OnCreateSpan",
      "sync.(*RWMutex).RLock",
      "github.com/grafana/dskit/middleware.Tracer.Wrap.makeHTTPOperationNameFunc.func2",
      "github.com/grafana/dskit/middleware.getRouteName",
      "github.com/gorilla/mux.(*Router).Match",
      "github.com/gorilla/mux.(*Route).Match",
      "github.com/gorilla/mux.(*routeRegexp).Match",
      "regexp.(*Regexp).MatchString",
      "regexp.(*Regexp).doMatch",
      "regexp.(*Regexp).doExecute",
      "golang.org/x/net/http2.(*serverConn).runHandler.func1",
      "golang.org/x/net/http2.(*responseWriter).handlerDone",
      "golang.org/x/net/http2.(*responseWriterState).promoteUndeclaredTrailers",
      "sync.(*Pool).Put",
      "sync.(*Pool).pin",
      "golang.org/x/net/http2.(*serverConn).readFrames",
      "golang.org/x/net/http2/h2c.(*bufConn).Read",
      "internal/poll.(*FD).readLock",
      "golang.org/x/net/http2.(*clientStream).doRequest",
      "golang.org/x/net/http2.(*clientStream).writeRequest",
      "golang.org/x/net/http2.(*clientStream).writeRequestBody",
      "golang.org/x/net/http2.(*clientStream).encodeAndWriteHeaders",
      "golang.org/x/net/http2.(*ClientConn).writeHeaders",
      "golang.org/x/net/http2.stickyErrWriter.Write",
      "github.com/parquet-go/parquet-go.readPages",
      "github.com/parquet-go/parquet-go.(*filePages).ReadPage",
      "github.com/parquet-go/parquet-go.(*filePages).readPage",
      "github.com/parquet-go/parquet-go.(*bufferPool).get",
      "github.com/parquet-go/parquet-go.(*bufferPool).newBuffer",
      "github.com/hashicorp/memberlist.(*Memberlist).triggerFunc",
      "github.com/hashicorp/memberlist.(*Memberlist).gossip",
      "github.com/hashicorp/memberlist.kRandomNodes",
      "github.com/armon/go-metrics.MeasureSince",
      "github.com/armon/go-metrics.(*Metrics).MeasureSince",
      "github.com/armon/go-metrics.(*Metrics).MeasureSinceWithLabels",
      "github.com/armon/go-metrics/prometheus.(*PrometheusSink).AddSampleWithLabels",
      "github.com/armon/go-metrics/prometheus.flattenKey",
      "strings.Join",
      "strings.(*Builder).Grow",
      "github.com/grafana/pyroscope/pkg/querier/worker.(*schedulerProcessor).querierLoop.func2",
      "github.com/grafana/pyroscope/pkg/querier/worker.(*schedulerProcessor).runRequest",
      "github.com/grafana/pyroscope/pkg/util/connectgrpc.(*grpcHandler).Handle",
      "github.com/grafana/pyroscope/api/gen/proto/go/querier/v1/querierv1connect.NewQuerierServiceHandler.func1",
      "connectrpc.com/connect.NewUnaryHandler[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string \"protobuf:\\\"bytes,1,rep,name=matchers,proto3\\\" json:\\\"matchers,omitempty\\\"\"; Start int64 \"protobuf:\\\"varint,2,opt,name=start,proto3\\\" json:\\\"start,omitempty\\\"\"; End int64 \"protobuf:\\\"varint,3,opt,name=end,proto3\\\" json:\\\"end,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string \"protobuf:\\\"bytes,1,rep,name=names,proto3\\\" json:\\\"names,omitempty\\\"\" }].func2",
      "compress/flate.(*compressor).init",
      "compress/flate.(*compressor).initDeflate",
      "runtime.memclrNoHeapPointersChunked",
      "github.com/grafana/pyroscope/pkg/querier/worker.(*processorManager).concurrency.func1",
      "github.com/grafana/pyroscope/pkg/querier/worker.(*schedulerProcessor).processQueriesOnSingleStream",
      "github.com/grafana/pyroscope/pkg/querier/worker.(*schedulerProcessor).processQueriesOnSingleStream.func1",
      "google.golang.org/grpc/internal/status.(*Error).Error",
      "google.golang.org/grpc/internal/status.(*Status).String",
      "fmt.Sprintf",
      "runtime.slicebytetostring",
      "github.com/grafana/pyroscope/pkg/querier/worker.(*schedulerProcessor).querierLoop",
      "runtime.newproc",
      "runtime.newproc.func1",
      "runtime.newproc1",
      "runtime.gfget",
      "runtime.gfget.func2",
      "runtime.stackalloc",
      "runtime.stackcacherefill",
      "runtime.stackpoolalloc",
      "github.com/gogo/status.FromError",
      "github.com/gogo/status.FromGRPCStatus",
      "google.golang.org/grpc/internal/status.(*Status).Proto",
      "github.com/golang/protobuf/proto.Clone",
      "github.com/golang/protobuf/proto.MessageV2",
      "google.golang.org/protobuf/internal/impl.Export.ProtoMessageV2Of",
      "google.golang.org/protobuf/internal/impl.Export.protoMessageV2Of",
      "runtime.assertE2I2",
      "github.com/grafana/pyroscope/pkg/querier.selectMergeTree.func1",
      "github.com/grafana/pyroscope/pkg/querier.NewMergeIterator[go.shape.*uint8,go.shape.*github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,go.shape.*github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]",
      "github.com/grafana/pyroscope/pkg/querier.(*mergeIterator[go.shape.*uint8,go.shape.*github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,go.shape.*github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).fetchBatch",
      "connectrpc.com/connect.(*BidiStreamForClient[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest \"protobuf:\\\"bytes,1,opt,name=request,proto3\\\" json:\\\"request,omitempty\\\"\"; MaxNodes *int64 \"protobuf:\\\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\\\" json:\\\"max_nodes,omitempty\\\"\"; Profiles []bool \"protobuf:\\\"varint,2,rep,packed,name=profiles,proto3\\\" json:\\\"profiles,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets \"protobuf:\\\"bytes,1,opt,name=selectedProfiles,proto3\\\" json:\\\"selectedProfiles,omitempty\\\"\"; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult \"protobuf:\\\"bytes,3,opt,name=result,proto3\\\" json:\\\"result,omitempty\\\"\" }]).Receive",
      "connectrpc.com/connect.(*errorTranslatingClientConn).Receive",
      "connectrpc.com/connect.(*connectStreamingClientConn).Receive",
      "connectrpc.com/connect.(*connectStreamingUnmarshaler).Unmarshal",
      "connectrpc.com/connect.(*protoBinaryCodec).Unmarshal",
      "google.golang.org/protobuf/proto.Unmarshal",
      "google.golang.org/protobuf/proto.UnmarshalOptions.unmarshal",
      "google.golang.org/protobuf/internal/impl.(*MessageInfo).unmarshal",
      "google.golang.org/protobuf/internal/impl.(*MessageInfo).unmarshalPointer",
      "google.golang.org/protobuf/internal/impl.consumeMessageInfo",
      "google.golang.org/protobuf/internal/impl.consumeMessageSliceInfo",
      "google.golang.org/protobuf/internal/impl.pointer.AppendPointerSlice",
      "runtime.growslice",
      "github.com/grafana/pyroscope/pkg/phlaredb/symdb.(*SymDB).updateStatsLoop",
      "github.com/grafana/pyroscope/pkg/phlaredb.(*PhlareDB).loop",
      "github.com/grafana/pyroscope/pkg/phlaredb.(*PhlareDB).runBlockQuerierSync",
      "github.com/grafana/pyroscope/pkg/phlaredb.(*BlockQuerier).Sync",
      "github.com/grafana/pyroscope/pkg/phlaredb.(*BlockQuerier).BlockMetas",
      "github.com/grafana/pyroscope/pkg/objstore.(*PrefixedBucket).Iter",
      "github.com/grafana/pyroscope/pkg/objstore/providers/filesystem.(*Bucket).Iter",
      "github.com/thanos-io/objstore/tracing/opentracing.TracingBucket.Iter",
      "github.com/thanos-io/objstore/tracing/opentracing.doWithSpan",
      "github.com/thanos-io/objstore/tracing/opentracing.(*TracingBucket).Iter.TracingBucket.Iter.func1",
      "github.com/thanos-io/objstore.(*metricBucket).Iter",
      "github.com/thanos-io/objstore/providers/filesystem.(*Bucket).Iter",
      "github.com/thanos-io/objstore/providers/filesystem.isDirEmpty",
      "os.(*File).Readdir",
      "os.(*File).readdir",
      "internal/poll.(*FD).ReadDirent",
      "syscall.ReadDirent",
      "syscall.Getdents",
      "runtime.entersyscall",
      "github.com/grafana/pyroscope/pkg/iter.(*BufferedIterator[go.shape.interface { Fingerprint() github.com/prometheus/common/model.Fingerprint; Labels() github.com/grafana/pyroscope/pkg/model.Labels; RowNumber() int64; StacktracePartition() uint64; Timestamp() github.com/prometheus/common/model.Time }]).fill",
      "github.com/grafana/pyroscope/pkg/frontend.(*frontendSchedulerWorker).start.func1",
      "github.com/grafana/pyroscope/pkg/frontend.(*frontendSchedulerWorker).runOne",
      "github.com/grafana/pyroscope/pkg/frontend.(*frontendSchedulerWorker).runOne.func1",
      "github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.(*schedulerForFrontendClient).FrontendLoop",
      "google.golang.org/grpc.(*ClientConn).NewStream",
      "google.golang.org/grpc.newClientStream",
      "github.com/grafana/pyroscope/pkg/frontend.(*frontendSchedulerWorker).schedulerLoop",
      "github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.(*schedulerForFrontendFrontendLoopClient).Send",
      "google.golang.org/grpc.(*clientStream).SendMsg",
      "google.golang.org/grpc.prepareMsg",
      "google.golang.org/grpc.encode",
      "google.golang.org/grpc/encoding/proto.codec.Marshal",
      "github.com/golang/protobuf/proto.Marshal",
      "github.com/golang/protobuf/proto.marshalAppend",
      "google.golang.org/protobuf/proto.MarshalOptions.MarshalAppend",
      "google.golang.org/protobuf/proto.MarshalOptions.marshal",
      "google.golang.org/protobuf/proto.protoMethods",
      "google.golang.org/protobuf/internal/impl.(*messageState).ProtoMethods",
      "github.com/grafana/dskit/services.(*BasicService).main",
      "github.com/grafana/pyroscope/pkg/scheduler.(*Scheduler).running",
      "runtime.sellock",
      "runtime.lock",
      "runtime.lockWithRank",
      "runtime.lock2",
      "runtime.step",
      "runtime.(*unwinder).cgoCallers",
      "context.(*cancelCtx).Done",
      "sync/atomic.(*Value).Load",
      "github.com/grafana/dskit/ring.(*Ring).loop",
      "github.com/grafana/dskit/kv.metrics.WatchKey",
      "github.com/grafana/dskit/instrument.CollectedRequest",
      "github.com/grafana/dskit/kv.metrics.WatchKey.func1",
      "github.com/grafana/dskit/kv.(*prefixedKVClient).WatchKey",
      "github.com/grafana/dskit/kv/memberlist.(*Client).WatchKey",
      "github.com/grafana/dskit/kv/memberlist.(*KV).WatchKey",
      "runtime.(*waitq).enqueue",
      "github.com/grafana/dskit/ring.(*Ring).loop.func1",
      "github.com/grafana/dskit/ring.(*Ring).updateRingState",
      "github.com/grafana/dskit/ring.(*Ring).updateRingMetrics",
      "github.com/prometheus/client_golang/prometheus.(*GaugeVec).WithLabelValues",
      "github.com/prometheus/client_golang/prometheus.(*GaugeVec).GetMetricWithLabelValues",
      "github.com/prometheus/client_golang/prometheus.(*MetricVec).GetMetricWithLabelValues",
      "github.com/prometheus/client_golang/prometheus.(*metricMap).getOrCreateMetricWithLabelValues",
      "sync.(*RWMutex).RUnlock",
      "github.com/grafana/dskit/ring.(*Lifecycler).loop",
      "github.com/grafana/dskit/ring.(*Lifecycler).updateConsul",
      "github.com/grafana/dskit/kv.metrics.CAS",
      "github.com/grafana/dskit/kv.metrics.CAS.func1",
      "github.com/grafana/dskit/kv.(*prefixedKVClient).CAS",
      "github.com/grafana/dskit/kv/memberlist.(*Client).CAS",
      "github.com/grafana/dskit/kv/memberlist.(*KV).CAS",
      "github.com/grafana/dskit/kv/memberlist.(*KV).trySingleCas",
      "github.com/grafana/dskit/kv/memberlist.(*KV).mergeValueForKey",
      "github.com/prometheus/client_golang/prometheus.(*metricMap).getMetricWithHashAndLabelValues",
      "github.com/prometheus/client_golang/prometheus.findMetricWithLabelValues",
      "github.com/grafana/dskit/ring.DoUntilQuorumWithoutSuccessfulContextCancellation[go.shape.struct { github.com/grafana/pyroscope/pkg/querier.addr string; github.com/grafana/pyroscope/pkg/querier.response go.shape.[]*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels }].func2",
      "github.com/grafana/pyroscope/pkg/querier.forGivenReplicationSet[go.shape.[]*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels,go.shape.interface { BlockMetadata(context.Context, *connectrpc.com/connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.BlockMetadataRequest]) (*connectrpc.com/connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.BlockMetadataResponse], error); LabelNames(context.Context, *connectrpc.com/connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) (*connectrpc.com/connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse], error); LabelValues(context.Context, *connectrpc.com/connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) (*connectrpc.com/connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse], error); MergeProfilesLabels(context.Context) github.com/grafana/pyroscope/pkg/clientpool.BidiClientMergeProfilesLabels; MergeProfilesPprof(context.Context) github.com/grafana/pyroscope/pkg/clientpool.BidiClientMergeProfilesPprof; MergeProfilesStacktraces(context.Context) github.com/grafana/pyroscope/pkg/clientpool.BidiClientMergeProfilesStacktraces; MergeSpanProfile(context.Context) github.com/grafana/pyroscope/pkg/clientpool.BidiClientMergeSpanProfile; ProfileTypes(context.Context, *connectrpc.com/connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) (*connectrpc.com/connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse], error); Series(context.Context, *connectrpc.com/connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) (*connectrpc.com/connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse], error) }].func1",
      "github.com/grafana/pyroscope/pkg/querier.(*Querier).seriesFromIngesters.func1",
      "github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1/ingesterv1connect.(*ingesterServiceClient).Series",
      "connectrpc.com/connect.(*Client[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string \"protobuf:\\\"bytes,1,rep,name=matchers,proto3\\\" json:\\\"matchers,omitempty\\\"\"; LabelNames []string \"protobuf:\\\"bytes,2,rep,name=label_names,json=labelNames,proto3\\\" json:\\\"label_names,omitempty\\\"\"; Start int64 \"protobuf:\\\"varint,3,opt,name=start,proto3\\\" json:\\\"start,omitempty\\\"\"; End int64 \"protobuf:\\\"varint,4,opt,name=end,proto3\\\" json:\\\"end,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels \"protobuf:\\\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\\\" json:\\\"labels_set,omitempty\\\"\" }]).CallUnary",
      "connectrpc.com/connect.NewClient[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string \"protobuf:\\\"bytes,1,rep,name=matchers,proto3\\\" json:\\\"matchers,omitempty\\\"\"; LabelNames []string \"protobuf:\\\"bytes,2,rep,name=label_names,json=labelNames,proto3\\\" json:\\\"label_names,omitempty\\\"\"; Start int64 \"protobuf:\\\"varint,3,opt,name=start,proto3\\\" json:\\\"start,omitempty\\\"\"; End int64 \"protobuf:\\\"varint,4,opt,name=end,proto3\\\" json:\\\"end,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels \"protobuf:\\\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\\\" json:\\\"labels_set,omitempty\\\"\" }].func2",
      "connectrpc.com/connect.NewClient[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string \"protobuf:\\\"bytes,1,rep,name=matchers,proto3\\\" json:\\\"matchers,omitempty\\\"\"; LabelNames []string \"protobuf:\\\"bytes,2,rep,name=label_names,json=labelNames,proto3\\\" json:\\\"label_names,omitempty\\\"\"; Start int64 \"protobuf:\\\"varint,3,opt,name=start,proto3\\\" json:\\\"start,omitempty\\\"\"; End int64 \"protobuf:\\\"varint,4,opt,name=end,proto3\\\" json:\\\"end,omitempty\\\"\" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels \"protobuf:\\\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\\\" json:\\\"labels_set,omitempty\\\"\" }].func1",
      "connectrpc.com/connect.receiveUnaryResponse[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels \"protobuf:\\\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\\\" json:\\\"labels_set,omitempty\\\"\" }]",
      "connectrpc.com/connect.(*connectUnaryClientConn).Receive",
      "connectrpc.com/connect.(*duplexHTTPCall).BlockUntilResponseReady",
      "runtime.chanrecv1",
      "runtime.chanrecv"
    ],
    "levels": [
      [0, 1580000000, 0, 0],
      [
        0, 10000000, 0, 531, 0, 100000000, 0, 494, 0, 20000000, 0, 476, 0, 10000000, 0, 475, 0, 10000000, 0, 457, 0,
        10000000, 0, 456, 0, 10000000, 0, 440, 0, 30000000, 0, 416, 0, 10000000, 0, 408, 0, 50000000, 0, 398, 0,
        10000000, 0, 393, 0, 20000000, 0, 387, 0, 50000000, 0, 384, 0, 240000000, 10000000, 276, 0, 20000000, 0, 271, 0,
        40000000, 0, 235, 0, 40000000, 0, 219, 0, 80000000, 0, 196, 0, 10000000, 0, 182, 0, 240000000, 0, 77, 0,
        10000000, 0, 73, 0, 20000000, 0, 64, 0, 60000000, 0, 46, 0, 470000000, 0, 9, 0, 10000000, 0, 1
      ],
      [
        0, 10000000, 0, 532, 0, 10000000, 0, 520, 0, 30000000, 0, 504, 0, 60000000, 0, 495, 0, 20000000, 0, 477, 0,
        10000000, 0, 143, 0, 10000000, 0, 458, 0, 10000000, 0, 143, 0, 10000000, 0, 441, 0, 30000000, 0, 417, 0,
        10000000, 0, 409, 0, 30000000, 0, 399, 0, 20000000, 0, 143, 0, 10000000, 0, 394, 0, 20000000, 0, 388, 0,
        50000000, 0, 220, 10000000, 10000000, 0, 379, 0, 220000000, 0, 79, 0, 20000000, 0, 272, 0, 10000000, 0, 266, 0,
        10000000, 0, 260, 0, 10000000, 0, 246, 0, 10000000, 0, 236, 0, 40000000, 0, 220, 0, 80000000, 0, 197, 0,
        10000000, 0, 183, 0, 10000000, 0, 172, 0, 230000000, 0, 78, 0, 10000000, 0, 74, 0, 20000000, 0, 65, 0, 60000000,
        0, 47, 0, 40000000, 0, 45, 0, 430000000, 0, 10, 0, 10000000, 0, 2
      ],
      [
        0, 10000000, 0, 533, 0, 10000000, 0, 521, 0, 30000000, 0, 505, 0, 10000000, 0, 502, 0, 50000000, 0, 143, 0,
        20000000, 0, 478, 0, 10000000, 0, 145, 0, 10000000, 0, 459, 0, 10000000, 0, 146, 0, 10000000, 0, 442, 0,
        30000000, 0, 418, 0, 10000000, 0, 410, 0, 20000000, 0, 401, 0, 10000000, 10000000, 400, 0, 20000000, 0, 146, 0,
        10000000, 0, 395, 0, 10000000, 0, 390, 0, 10000000, 0, 389, 0, 40000000, 0, 221, 0, 10000000, 0, 222, 10000000,
        10000000, 0, 380, 0, 220000000, 0, 82, 0, 20000000, 0, 273, 0, 10000000, 0, 267, 0, 10000000, 0, 261, 0,
        10000000, 0, 247, 0, 10000000, 0, 237, 0, 10000000, 0, 227, 0, 30000000, 0, 221, 0, 60000000, 0, 210, 0,
        10000000, 0, 207, 0, 10000000, 0, 198, 0, 10000000, 0, 184, 0, 10000000, 0, 173, 0, 230000000, 0, 79, 0,
        10000000, 0, 75, 0, 20000000, 0, 66, 0, 60000000, 0, 48, 0, 40000000, 0, 5, 0, 430000000, 0, 5, 0, 10000000, 0,
        3
      ],
      [
        0, 10000000, 0, 534, 0, 10000000, 0, 522, 0, 30000000, 0, 506, 0, 10000000, 10000000, 503, 0, 40000000, 0, 146,
        0, 10000000, 0, 496, 0, 10000000, 0, 482, 0, 10000000, 0, 479, 0, 10000000, 10000000, 8, 0, 10000000, 0, 460, 0,
        10000000, 0, 147, 0, 10000000, 0, 443, 0, 10000000, 0, 432, 0, 10000000, 0, 423, 0, 10000000, 0, 419, 0,
        10000000, 0, 79, 0, 20000000, 0, 402, 10000000, 20000000, 0, 147, 0, 10000000, 0, 396, 0, 10000000, 0, 391, 0,
        10000000, 0, 257, 0, 40000000, 0, 222, 0, 10000000, 0, 223, 10000000, 10000000, 0, 339, 0, 10000000, 0, 371, 0,
        20000000, 0, 365, 0, 190000000, 0, 79, 0, 20000000, 0, 274, 0, 10000000, 0, 268, 0, 10000000, 0, 262, 0,
        10000000, 0, 248, 0, 10000000, 0, 238, 0, 10000000, 0, 228, 0, 30000000, 0, 222, 0, 60000000, 0, 211, 0,
        10000000, 0, 143, 0, 10000000, 0, 199, 0, 10000000, 0, 185, 0, 10000000, 0, 174, 0, 230000000, 0, 80, 0,
        10000000, 10000000, 76, 0, 20000000, 0, 67, 0, 60000000, 0, 49, 0, 40000000, 0, 6, 0, 320000000, 10000000, 6, 0,
        110000000, 0, 11, 0, 10000000, 0, 4
      ],
      [
        0, 10000000, 0, 535, 0, 10000000, 0, 506, 0, 30000000, 0, 507, 10000000, 40000000, 0, 147, 0, 10000000, 0, 497,
        0, 10000000, 0, 483, 0, 10000000, 0, 480, 10000000, 10000000, 0, 461, 0, 10000000, 0, 148, 0, 10000000, 0, 444,
        0, 10000000, 0, 433, 0, 10000000, 0, 424, 0, 10000000, 0, 420, 0, 10000000, 0, 411, 0, 20000000, 10000000, 403,
        10000000, 20000000, 0, 148, 0, 10000000, 0, 397, 0, 10000000, 0, 275, 0, 10000000, 0, 124, 0, 40000000, 0, 223,
        0, 10000000, 0, 385, 10000000, 10000000, 0, 340, 0, 10000000, 0, 372, 0, 20000000, 0, 366, 0, 190000000, 0, 83,
        0, 20000000, 0, 275, 0, 10000000, 0, 269, 0, 10000000, 0, 263, 0, 10000000, 0, 249, 0, 10000000, 0, 239, 0,
        10000000, 0, 229, 0, 30000000, 0, 223, 0, 60000000, 0, 212, 0, 10000000, 0, 208, 0, 10000000, 0, 123, 0,
        10000000, 0, 186, 0, 10000000, 0, 175, 0, 230000000, 0, 81, 10000000, 20000000, 0, 47, 0, 10000000, 0, 55, 0,
        50000000, 30000000, 50, 0, 40000000, 0, 17, 10000000, 20000000, 10000000, 7, 0, 10000000, 0, 43, 0, 150000000,
        10000000, 40, 0, 30000000, 0, 37, 0, 10000000, 0, 35, 0, 40000000, 10000000, 24, 0, 50000000, 0, 17, 0,
        110000000, 0, 12, 0, 10000000, 0, 5
      ],
      [
        0, 10000000, 0, 536, 0, 10000000, 0, 523, 0, 30000000, 0, 508, 10000000, 40000000, 0, 148, 0, 10000000, 0, 498,
        0, 10000000, 0, 484, 0, 10000000, 0, 481, 10000000, 10000000, 0, 461, 0, 10000000, 0, 47, 0, 10000000, 0, 445,
        0, 10000000, 0, 434, 0, 10000000, 0, 47, 0, 10000000, 0, 421, 0, 10000000, 0, 278, 10000000, 10000000, 0, 404,
        10000000, 20000000, 0, 47, 0, 10000000, 0, 257, 0, 10000000, 0, 392, 0, 10000000, 0, 125, 0, 40000000, 0, 385,
        0, 10000000, 0, 74, 10000000, 10000000, 0, 341, 0, 10000000, 0, 373, 0, 10000000, 0, 369, 0, 10000000, 0, 367,
        0, 10000000, 0, 362, 0, 180000000, 0, 79, 0, 20000000, 0, 212, 0, 10000000, 10000000, 270, 0, 10000000, 0, 264,
        0, 10000000, 0, 249, 0, 10000000, 0, 240, 0, 10000000, 0, 230, 0, 30000000, 10000000, 224, 0, 60000000, 0, 213,
        0, 10000000, 10000000, 209, 0, 10000000, 0, 124, 0, 10000000, 0, 187, 0, 10000000, 0, 176, 0, 90000000, 0, 141,
        0, 140000000, 0, 79, 10000000, 20000000, 0, 68, 0, 10000000, 0, 56, 30000000, 10000000, 0, 53, 0, 10000000, 0,
        51, 0, 40000000, 0, 19, 20000000, 10000000, 0, 28, 0, 10000000, 0, 44, 10000000, 140000000, 0, 41, 0, 30000000,
        0, 38, 0, 10000000, 10000000, 36, 10000000, 20000000, 0, 7, 0, 10000000, 0, 25, 0, 10000000, 0, 22, 0, 30000000,
        0, 19, 0, 10000000, 10000000, 18, 0, 110000000, 0, 13, 0, 10000000, 0, 6
      ],
      [
        0, 10000000, 0, 306, 0, 10000000, 0, 524, 0, 30000000, 0, 509, 10000000, 40000000, 0, 47, 0, 10000000, 10000000,
        499, 0, 10000000, 0, 485, 0, 10000000, 0, 455, 10000000, 10000000, 0, 462, 0, 10000000, 0, 149, 0, 10000000, 0,
        446, 0, 10000000, 0, 435, 0, 10000000, 0, 425, 0, 10000000, 10000000, 422, 0, 10000000, 0, 412, 10000000,
        10000000, 0, 405, 10000000, 20000000, 0, 149, 0, 10000000, 0, 124, 0, 10000000, 0, 212, 0, 10000000, 0, 258, 0,
        40000000, 0, 74, 0, 10000000, 0, 75, 10000000, 10000000, 0, 342, 0, 10000000, 0, 374, 0, 10000000, 10000000,
        370, 0, 10000000, 0, 368, 0, 10000000, 0, 2, 0, 180000000, 0, 84, 0, 20000000, 0, 213, 10000000, 10000000,
        10000000, 265, 0, 10000000, 0, 250, 0, 10000000, 0, 241, 0, 10000000, 0, 231, 10000000, 20000000, 0, 74, 0,
        60000000, 0, 214, 10000000, 10000000, 0, 200, 0, 10000000, 0, 188, 0, 10000000, 0, 177, 0, 90000000, 0, 142, 0,
        140000000, 0, 82, 10000000, 20000000, 0, 69, 0, 10000000, 0, 57, 30000000, 10000000, 10000000, 54, 0, 10000000,
        10000000, 52, 0, 40000000, 10000000, 20, 20000000, 10000000, 0, 30, 0, 10000000, 0, 13, 10000000, 140000000,
        140000000, 42, 0, 30000000, 30000000, 39, 20000000, 20000000, 0, 28, 0, 10000000, 0, 26, 0, 10000000, 10000000,
        23, 0, 30000000, 0, 20, 10000000, 110000000, 0, 14, 0, 10000000, 0, 7
      ],
      [
        0, 10000000, 0, 537, 0, 10000000, 0, 525, 0, 30000000, 0, 510, 10000000, 40000000, 0, 149, 10000000, 10000000,
        0, 486, 0, 10000000, 0, 124, 10000000, 10000000, 0, 463, 0, 10000000, 10000000, 150, 0, 10000000, 0, 329, 0,
        10000000, 0, 436, 0, 10000000, 0, 426, 10000000, 10000000, 0, 281, 10000000, 10000000, 0, 406, 10000000,
        10000000, 10000000, 364, 0, 10000000, 0, 150, 0, 10000000, 10000000, 294, 0, 10000000, 0, 213, 0, 10000000,
        10000000, 259, 0, 40000000, 0, 75, 0, 10000000, 0, 76, 10000000, 10000000, 0, 381, 0, 10000000, 0, 375,
        10000000, 10000000, 0, 123, 0, 10000000, 0, 363, 0, 180000000, 0, 85, 0, 20000000, 0, 214, 20000000, 10000000,
        0, 251, 0, 10000000, 0, 242, 0, 10000000, 0, 232, 10000000, 20000000, 0, 75, 0, 60000000, 0, 215, 10000000,
        10000000, 0, 201, 0, 10000000, 0, 189, 0, 10000000, 0, 178, 0, 30000000, 0, 160, 0, 60000000, 0, 143, 0,
        140000000, 0, 79, 10000000, 20000000, 0, 70, 0, 10000000, 0, 58, 60000000, 30000000, 0, 21, 20000000, 10000000,
        10000000, 31, 0, 10000000, 0, 14, 200000000, 10000000, 0, 30, 0, 10000000, 10000000, 29, 0, 10000000, 10000000,
        27, 10000000, 30000000, 0, 21, 10000000, 110000000, 0, 15, 0, 10000000, 10000000, 8
      ],
      [
        0, 10000000, 0, 538, 0, 10000000, 0, 526, 0, 10000000, 0, 512, 0, 20000000, 0, 143, 10000000, 10000000, 0, 157,
        0, 30000000, 0, 150, 10000000, 10000000, 0, 487, 0, 10000000, 10000000, 169, 10000000, 10000000, 0, 464,
        10000000, 10000000, 0, 447, 0, 10000000, 0, 437, 0, 10000000, 0, 427, 10000000, 10000000, 0, 320, 10000000,
        10000000, 10000000, 407, 20000000, 10000000, 0, 154, 10000000, 10000000, 0, 214, 10000000, 40000000, 0, 76, 0,
        10000000, 0, 215, 10000000, 10000000, 0, 382, 0, 10000000, 0, 376, 10000000, 10000000, 10000000, 124, 0,
        10000000, 10000000, 364, 0, 180000000, 0, 86, 0, 20000000, 0, 215, 20000000, 10000000, 0, 252, 0, 10000000, 0,
        243, 0, 10000000, 0, 233, 10000000, 20000000, 0, 76, 0, 60000000, 0, 216, 10000000, 10000000, 0, 47, 0,
        10000000, 0, 190, 0, 10000000, 0, 179, 0, 30000000, 0, 161, 0, 50000000, 0, 146, 0, 10000000, 0, 144, 0,
        140000000, 0, 83, 10000000, 20000000, 0, 71, 0, 10000000, 0, 59, 60000000, 30000000, 30000000, 16, 30000000,
        10000000, 0, 15, 200000000, 10000000, 0, 31, 30000000, 30000000, 30000000, 16, 10000000, 110000000, 110000000,
        16
      ],
      [
        0, 10000000, 0, 444, 0, 10000000, 0, 527, 0, 10000000, 0, 513, 0, 10000000, 10000000, 511, 0, 10000000, 0, 146,
        10000000, 10000000, 0, 155, 0, 10000000, 10000000, 501, 0, 10000000, 0, 154, 0, 10000000, 0, 151, 10000000,
        10000000, 0, 488, 20000000, 10000000, 0, 465, 10000000, 10000000, 0, 448, 0, 10000000, 0, 438, 0, 10000000, 0,
        428, 10000000, 10000000, 0, 321, 40000000, 10000000, 10000000, 155, 10000000, 10000000, 0, 215, 10000000,
        10000000, 10000000, 386, 0, 30000000, 0, 215, 0, 10000000, 0, 225, 10000000, 10000000, 10000000, 383, 0,
        10000000, 0, 377, 30000000, 180000000, 0, 87, 0, 20000000, 0, 216, 20000000, 10000000, 0, 253, 0, 10000000, 0,
        244, 0, 10000000, 0, 166, 10000000, 20000000, 0, 215, 0, 60000000, 0, 217, 10000000, 10000000, 0, 202, 0,
        10000000, 0, 191, 0, 10000000, 0, 180, 0, 20000000, 0, 167, 0, 10000000, 0, 162, 0, 50000000, 0, 147, 0,
        10000000, 0, 145, 0, 140000000, 0, 79, 10000000, 20000000, 20000000, 72, 0, 10000000, 0, 60, 120000000,
        10000000, 10000000, 16, 200000000, 10000000, 0, 32
      ],
      [
        0, 10000000, 0, 539, 0, 10000000, 0, 528, 0, 10000000, 0, 514, 10000000, 10000000, 0, 147, 10000000, 10000000,
        10000000, 156, 10000000, 10000000, 0, 158, 0, 10000000, 0, 152, 10000000, 10000000, 0, 489, 20000000, 10000000,
        0, 466, 10000000, 10000000, 0, 449, 0, 10000000, 10000000, 439, 0, 10000000, 0, 429, 10000000, 10000000, 0, 286,
        60000000, 10000000, 0, 216, 20000000, 30000000, 0, 225, 0, 10000000, 0, 226, 20000000, 10000000, 10000000, 378,
        30000000, 180000000, 0, 79, 0, 20000000, 0, 217, 20000000, 10000000, 0, 254, 0, 10000000, 0, 245, 0, 10000000,
        10000000, 234, 10000000, 20000000, 0, 225, 0, 60000000, 0, 218, 10000000, 10000000, 0, 203, 0, 10000000, 0, 192,
        0, 10000000, 10000000, 181, 0, 10000000, 10000000, 171, 0, 10000000, 0, 168, 0, 10000000, 0, 163, 0, 50000000,
        0, 148, 0, 10000000, 10000000, 8, 0, 140000000, 0, 84, 30000000, 10000000, 0, 61, 330000000, 10000000, 0, 33
      ],
      [
        0, 10000000, 0, 540, 0, 10000000, 0, 515, 0, 10000000, 0, 515, 10000000, 10000000, 0, 148, 30000000, 10000000,
        0, 159, 0, 10000000, 0, 153, 10000000, 10000000, 0, 490, 20000000, 10000000, 0, 467, 10000000, 10000000, 0, 450,
        10000000, 10000000, 0, 430, 10000000, 10000000, 0, 287, 60000000, 10000000, 0, 217, 20000000, 30000000, 0, 226,
        0, 10000000, 0, 218, 60000000, 180000000, 0, 88, 0, 20000000, 0, 218, 20000000, 10000000, 0, 255, 0, 10000000,
        0, 117, 20000000, 20000000, 0, 226, 0, 60000000, 0, 118, 10000000, 10000000, 0, 204, 0, 10000000, 0, 193,
        20000000, 10000000, 0, 123, 0, 10000000, 0, 164, 0, 50000000, 0, 47, 10000000, 140000000, 0, 85, 30000000,
        10000000, 0, 62, 330000000, 10000000, 10000000, 34
      ],
      [
        0, 10000000, 0, 541, 0, 10000000, 0, 516, 0, 10000000, 0, 516, 10000000, 10000000, 0, 47, 30000000, 10000000, 0,
        61, 0, 10000000, 0, 61, 10000000, 10000000, 0, 491, 20000000, 10000000, 0, 468, 10000000, 10000000, 0, 451,
        10000000, 10000000, 10000000, 431, 10000000, 10000000, 0, 138, 60000000, 10000000, 0, 218, 20000000, 30000000,
        0, 218, 0, 10000000, 0, 118, 60000000, 180000000, 10000000, 89, 0, 20000000, 0, 118, 20000000, 10000000, 0, 256,
        0, 10000000, 0, 118, 20000000, 20000000, 0, 218, 0, 60000000, 60000000, 42, 10000000, 10000000, 0, 50, 0,
        10000000, 0, 194, 20000000, 10000000, 0, 124, 0, 10000000, 0, 165, 0, 50000000, 0, 149, 10000000, 140000000, 0,
        86, 30000000, 10000000, 10000000, 63
      ],
      [
        0, 10000000, 0, 542, 0, 10000000, 0, 517, 0, 10000000, 0, 517, 10000000, 10000000, 0, 149, 30000000, 10000000,
        10000000, 500, 0, 10000000, 10000000, 500, 10000000, 10000000, 0, 492, 20000000, 10000000, 0, 469, 10000000,
        10000000, 0, 452, 30000000, 10000000, 0, 96, 60000000, 10000000, 0, 118, 20000000, 30000000, 0, 118, 0,
        10000000, 10000000, 42, 70000000, 110000000, 0, 278, 0, 60000000, 0, 277, 0, 20000000, 20000000, 42, 20000000,
        10000000, 0, 257, 0, 10000000, 10000000, 42, 20000000, 20000000, 0, 118, 70000000, 10000000, 0, 205, 0,
        10000000, 0, 195, 20000000, 10000000, 0, 169, 0, 10000000, 10000000, 166, 0, 10000000, 0, 157, 0, 40000000, 0,
        150, 10000000, 140000000, 0, 87
      ],
      [
        0, 10000000, 0, 145, 0, 10000000, 0, 518, 0, 10000000, 0, 518, 10000000, 10000000, 0, 150, 60000000, 10000000,
        10000000, 493, 20000000, 10000000, 0, 470, 10000000, 10000000, 0, 451, 30000000, 10000000, 0, 122, 60000000,
        10000000, 10000000, 42, 20000000, 30000000, 30000000, 42, 80000000, 10000000, 0, 359, 0, 30000000, 0, 349, 0,
        30000000, 0, 322, 0, 20000000, 0, 305, 0, 20000000, 0, 295, 0, 60000000, 0, 278, 40000000, 10000000, 0, 124,
        30000000, 20000000, 20000000, 42, 70000000, 10000000, 10000000, 206, 0, 10000000, 0, 117, 20000000, 10000000,
        10000000, 170, 10000000, 10000000, 0, 158, 0, 20000000, 0, 154, 0, 20000000, 0, 151, 10000000, 140000000, 0, 79
      ],
      [
        0, 10000000, 10000000, 8, 0, 10000000, 0, 529, 0, 10000000, 10000000, 519, 10000000, 10000000, 0, 151, 90000000,
        10000000, 0, 471, 10000000, 10000000, 0, 453, 30000000, 10000000, 0, 413, 200000000, 10000000, 0, 360, 0,
        30000000, 0, 350, 0, 30000000, 0, 323, 0, 10000000, 0, 281, 0, 10000000, 0, 306, 0, 20000000, 0, 296, 0,
        50000000, 0, 280, 0, 10000000, 10000000, 279, 40000000, 10000000, 0, 125, 130000000, 10000000, 0, 118, 40000000,
        10000000, 0, 159, 0, 20000000, 10000000, 155, 0, 20000000, 0, 152, 10000000, 140000000, 0, 88
      ],
      [
        10000000, 10000000, 10000000, 530, 20000000, 10000000, 0, 152, 90000000, 10000000, 0, 215, 10000000, 10000000,
        0, 451, 30000000, 10000000, 0, 414, 200000000, 10000000, 0, 361, 0, 10000000, 0, 357, 0, 20000000, 0, 351, 0,
        10000000, 0, 325, 0, 10000000, 0, 336, 0, 10000000, 0, 324, 0, 10000000, 0, 320, 0, 10000000, 0, 307, 0,
        20000000, 0, 297, 0, 50000000, 0, 281, 50000000, 10000000, 0, 258, 130000000, 10000000, 10000000, 42, 40000000,
        10000000, 0, 61, 10000000, 10000000, 10000000, 156, 0, 20000000, 0, 153, 10000000, 140000000, 0, 89
      ],
      [
        40000000, 10000000, 0, 153, 90000000, 10000000, 0, 472, 10000000, 10000000, 0, 453, 30000000, 10000000, 0, 257,
        200000000, 10000000, 0, 285, 0, 10000000, 0, 358, 0, 20000000, 0, 352, 0, 10000000, 0, 326, 0, 10000000, 0, 281,
        0, 10000000, 0, 325, 0, 10000000, 0, 321, 0, 10000000, 0, 308, 0, 20000000, 0, 298, 0, 50000000, 0, 282,
        50000000, 10000000, 10000000, 259, 180000000, 10000000, 0, 62, 20000000, 20000000, 10000000, 61, 10000000,
        140000000, 0, 79
      ],
      [
        40000000, 10000000, 10000000, 61, 90000000, 10000000, 0, 473, 10000000, 10000000, 0, 454, 30000000, 10000000, 0,
        124, 200000000, 10000000, 0, 286, 0, 10000000, 0, 326, 0, 10000000, 0, 353, 0, 10000000, 0, 143, 0, 10000000, 0,
        327, 0, 10000000, 0, 282, 0, 10000000, 0, 326, 0, 10000000, 0, 286, 0, 10000000, 0, 309, 0, 20000000, 0, 299, 0,
        50000000, 0, 283, 240000000, 10000000, 10000000, 63, 30000000, 10000000, 0, 62, 10000000, 140000000, 0, 90
      ],
      [
        140000000, 10000000, 0, 218, 10000000, 10000000, 0, 455, 30000000, 10000000, 0, 415, 200000000, 10000000, 0,
        287, 0, 10000000, 0, 327, 0, 10000000, 0, 124, 0, 10000000, 0, 146, 0, 10000000, 0, 328, 0, 10000000, 0, 337, 0,
        10000000, 0, 327, 0, 10000000, 0, 287, 0, 10000000, 0, 298, 0, 20000000, 0, 300, 0, 50000000, 0, 284, 280000000,
        10000000, 10000000, 63, 10000000, 10000000, 0, 137, 0, 120000000, 0, 102, 0, 10000000, 0, 79
      ],
      [
        140000000, 10000000, 10000000, 474, 10000000, 10000000, 10000000, 124, 30000000, 10000000, 10000000, 294,
        200000000, 10000000, 0, 288, 0, 10000000, 0, 328, 0, 10000000, 0, 354, 0, 10000000, 0, 147, 0, 10000000, 0, 329,
        0, 10000000, 0, 338, 0, 10000000, 0, 328, 0, 10000000, 0, 288, 0, 10000000, 0, 310, 0, 20000000, 0, 301, 0,
        50000000, 0, 285, 300000000, 10000000, 0, 138, 0, 120000000, 0, 103, 0, 10000000, 0, 91
      ],
      [
        410000000, 10000000, 0, 289, 0, 10000000, 0, 329, 0, 10000000, 0, 355, 0, 10000000, 0, 148, 0, 10000000, 0, 344,
        0, 10000000, 0, 338, 0, 10000000, 0, 329, 0, 10000000, 0, 289, 0, 10000000, 0, 311, 0, 20000000, 0, 302, 0,
        50000000, 0, 286, 300000000, 10000000, 0, 139, 0, 120000000, 0, 104, 0, 10000000, 0, 79
      ],
      [
        410000000, 10000000, 0, 290, 0, 10000000, 10000000, 330, 0, 10000000, 10000000, 356, 0, 10000000, 0, 47, 0,
        10000000, 0, 345, 0, 10000000, 0, 339, 0, 10000000, 0, 330, 0, 10000000, 0, 290, 0, 10000000, 0, 312, 0,
        20000000, 0, 303, 0, 20000000, 0, 293, 0, 20000000, 0, 292, 0, 10000000, 0, 287, 300000000, 10000000, 0, 140, 0,
        110000000, 0, 119, 0, 10000000, 0, 105, 0, 10000000, 0, 92
      ],
      [
        410000000, 10000000, 10000000, 291, 20000000, 10000000, 0, 149, 0, 10000000, 0, 346, 0, 10000000, 0, 340, 0,
        10000000, 0, 119, 0, 10000000, 10000000, 291, 0, 10000000, 0, 313, 0, 20000000, 0, 281, 0, 20000000, 0, 96, 0,
        20000000, 0, 288, 0, 10000000, 0, 288, 300000000, 10000000, 10000000, 99, 0, 110000000, 0, 120, 0, 10000000, 0,
        106, 0, 10000000, 0, 93
      ],
      [
        440000000, 10000000, 0, 150, 0, 10000000, 0, 347, 0, 10000000, 0, 275, 0, 10000000, 0, 120, 10000000, 10000000,
        0, 120, 0, 20000000, 0, 304, 0, 20000000, 0, 122, 0, 20000000, 0, 289, 0, 10000000, 0, 289, 310000000,
        110000000, 0, 121, 0, 10000000, 0, 107, 0, 10000000, 0, 94
      ],
      [
        440000000, 10000000, 0, 154, 0, 10000000, 10000000, 348, 0, 10000000, 0, 341, 0, 10000000, 0, 121, 10000000,
        10000000, 0, 121, 0, 20000000, 0, 283, 0, 20000000, 0, 123, 0, 20000000, 0, 290, 0, 10000000, 0, 290, 310000000,
        110000000, 0, 94, 0, 10000000, 0, 108, 0, 10000000, 0, 95
      ],
      [
        440000000, 10000000, 10000000, 155, 10000000, 10000000, 0, 342, 0, 10000000, 0, 331, 10000000, 10000000, 0, 314,
        0, 20000000, 0, 284, 0, 20000000, 0, 124, 0, 20000000, 20000000, 291, 0, 10000000, 10000000, 291, 310000000,
        100000000, 0, 96, 0, 10000000, 0, 95, 0, 10000000, 0, 109, 0, 10000000, 0, 96
      ],
      [
        460000000, 10000000, 0, 343, 0, 10000000, 0, 332, 10000000, 10000000, 0, 315, 0, 20000000, 0, 285, 0, 10000000,
        10000000, 169, 0, 10000000, 10000000, 294, 340000000, 100000000, 0, 97, 0, 10000000, 0, 96, 0, 10000000, 0, 110,
        0, 10000000, 0, 97
      ],
      [
        460000000, 10000000, 0, 143, 0, 10000000, 0, 333, 10000000, 10000000, 0, 316, 0, 20000000, 0, 286, 360000000,
        100000000, 0, 98, 0, 10000000, 0, 122, 0, 10000000, 0, 111, 0, 10000000, 0, 98
      ],
      [
        460000000, 10000000, 0, 208, 0, 10000000, 0, 334, 10000000, 10000000, 0, 317, 0, 20000000, 0, 287, 360000000,
        100000000, 20000000, 99, 0, 10000000, 0, 123, 0, 10000000, 0, 112, 0, 10000000, 0, 99
      ],
      [
        460000000, 10000000, 10000000, 209, 0, 10000000, 0, 335, 10000000, 10000000, 0, 318, 0, 10000000, 0, 138, 0,
        10000000, 0, 288, 380000000, 60000000, 50000000, 100, 0, 20000000, 0, 132, 0, 10000000, 0, 124, 0, 10000000, 0,
        113, 0, 10000000, 0, 100
      ],
      [
        470000000, 10000000, 0, 143, 10000000, 10000000, 10000000, 319, 0, 10000000, 0, 139, 0, 10000000, 0, 289,
        430000000, 10000000, 10000000, 101, 0, 20000000, 0, 133, 0, 10000000, 0, 125, 0, 10000000, 0, 114, 0, 10000000,
        10000000, 101
      ],
      [
        470000000, 10000000, 0, 146, 20000000, 10000000, 0, 140, 0, 10000000, 0, 290, 440000000, 10000000, 10000000,
        136, 0, 10000000, 0, 134, 0, 10000000, 0, 126, 0, 10000000, 0, 115
      ],
      [
        470000000, 10000000, 0, 147, 20000000, 10000000, 10000000, 99, 0, 10000000, 10000000, 291, 450000000, 10000000,
        10000000, 135, 0, 10000000, 0, 47, 0, 10000000, 0, 116
      ],
      [470000000, 10000000, 0, 148, 500000000, 10000000, 0, 127, 0, 10000000, 0, 117],
      [470000000, 10000000, 0, 47, 500000000, 10000000, 0, 128, 0, 10000000, 0, 118],
      [470000000, 10000000, 0, 149, 500000000, 10000000, 0, 129, 0, 10000000, 10000000, 42],
      [470000000, 10000000, 0, 150, 500000000, 10000000, 0, 130],
      [470000000, 10000000, 0, 154, 500000000, 10000000, 10000000, 131],
      [470000000, 10000000, 10000000, 155]
    ],
    "numTicks": 1580000000,
    "maxSelf": 140000000
  },
  "metadata": { "name": "cpu", "format": "single", "sampleRate": 1000000000, "spyName": "unknown", "units": "samples" },
  "timeline": {
    "startTime": 1711380460,
    "samples": [
      0, 70000000, 60000000, 0, 80000000, 60000000, 0, 70000000, 40000000, 0, 60000000, 50000000, 0, 50000000, 40000000,
      0, 70000000, 60000000, 0, 60000000, 70000000, 0, 90000000, 70000000, 0, 340000000, 130000000, 0, 110000000, 0
    ],
    "durationDelta": 10
  },
  "annotations": []
}
