// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by:
//     public/app/plugins/gen.go
// Using jennies:
//     TSTypesJenny
//     PluginTSTypesJenny
//
// Run 'make gen-cue' from repository root to regenerate.

import * as common from '@grafana/schema';

export const PanelCfgModelVersion = Object.freeze([0, 0]);

export interface PanelOptions extends common.SingleStatBaseOptions {
  colorMode: common.BigValueColorMode;
  graphMode: common.BigValueGraphMode;
  justifyMode: common.BigValueJustifyMode;
  textMode: common.BigValueTextMode;
}

export const defaultPanelOptions: Partial<PanelOptions> = {
  colorMode: common.BigValueColorMode.Value,
  graphMode: common.BigValueGraphMode.Area,
  justifyMode: common.BigValueJustifyMode.Auto,
  textMode: common.BigValueTextMode.Auto,
};

export interface PanelFieldConfig {
  /**
   * The first matching test will be used to override display values
   */
  conditions?: Array<ConditionalDisplay>;
}

export const defaultPanelFieldConfig: Partial<PanelFieldConfig> = {
  conditions: [],
};

export interface ConditionalDisplay {
  display: CustomDisplayValue;
  test: ConditionTest;
}

export enum ConditionTestMode {
  Field = 'field',
  True = 'true',
  Value = 'value',
}

/**
 * Test the
 */
export interface ConditionTest {
  field?: string;
  mode: ConditionTestMode;
  op: common.ComparisonOperation;
  reducer?: string;
  value?: (number | string | boolean);
}

export const defaultConditionTest: Partial<ConditionTest> = {
  mode: ConditionTestMode.Value,
};

/**
 * Optionally the calculated DisplayValue
 */
export interface CustomDisplayValue {
  color?: string;
  prefix?: string;
  suffix?: string;
  text?: string;
}
